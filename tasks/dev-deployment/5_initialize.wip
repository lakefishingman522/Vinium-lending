import {task} from '@nomiclabs/buidler/config';
import {
getLendingPoolAddressesProvider,
getMockedTokens,
initReserves,
} from '../../helpers/contracts-helpers';
import {getReservesConfigByPool} from '../../helpers/constants';

import {tEthereumAddress, AavePools} from '../../helpers/types';
import {waitForTx} from '../../helpers/misc-utils';

task('initialize-lending-pool', 'Deploy oracles for dev enviroment')
.addOptionalParam('verify', 'Verify contracts at Etherscan')
.setAction(async ({verify}, localBRE) => {
await localBRE.run('set-bre');

    const mockTokens = await getMockedTokens();

    const allTokenAddresses = Object.entries(mockTokens).reduce(
      (accum: {[tokenSymbol: string]: tEthereumAddress}, [tokenSymbol, tokenContract]) => ({
        ...accum,
        [tokenSymbol]: tokenContract.address,
      }),
      {}
    );
    const addressesProvider = await getLendingPoolAddressesProvider();

    const {
      UNI_DAI_ETH,
      UNI_USDC_ETH,
      UNI_SETH_ETH,
      UNI_LINK_ETH,
      UNI_MKR_ETH,
      UNI_LEND_ETH,
      ...protoPoolReservesAddresses
    } = <{[symbol: string]: tEthereumAddress}>allTokenAddresses;

    const reservesParams = getReservesConfigByPool(AavePools.proto);

    console.log('Initialize configuration');
    await initReserves(
      reservesParams,
      protoPoolReservesAddresses,
      addressesProvider,
      lendingPoolProxy,
      lendingPoolConfiguratorProxy,
      AavePools.proto
    );
    await enableReservesToBorrow(
      reservesParams,
      protoPoolReservesAddresses,
      lendingPoolProxy,
      lendingPoolConfiguratorProxy
    );
    await enableReservesAsCollateral(
      reservesParams,
      protoPoolReservesAddresses,
      lendingPoolProxy,
      lendingPoolConfiguratorProxy
    );

    const liquidationManager = await deployLendingPoolLiquidationManager();
    await waitForTx(
      await addressesProvider.setLendingPoolLiquidationManager(liquidationManager.address)
    );

    const {receivers, percentages} = getFeeDistributionParamsCommon(lendingPoolManager);

    const tokenDistributorImpl = await deployTokenDistributor();
    const tokenDistributorProxy = await deployInitializableAdminUpgradeabilityProxy();
    const implementationParams = tokenDistributorImpl.interface.encodeFunctionData('initialize', [
      ZERO_ADDRESS,
      tokensAddressesWithoutUsd.LEND,
      '0x0000000000000000000000000000000000000000', // TODO: finish removal
      receivers,
      percentages,
      Object.values(tokensAddressesWithoutUsd),
    ]);
    await waitForTx(
      await tokenDistributorProxy['initialize(address,address,bytes)'](
        tokenDistributorImpl.address,
        await secondaryWallet.getAddress(),
        implementationParams
      )
    );
    await waitForTx(await addressesProvider.setTokenDistributor(tokenDistributorProxy.address));

    await insertContractAddressInDb(eContractid.TokenDistributor, tokenDistributorProxy.address);

    const mockFlashLoanReceiver = await deployMockFlashLoanReceiver(addressesProvider.address);
    await insertContractAddressInDb(
      eContractid.MockFlashLoanReceiver,
      mockFlashLoanReceiver.address
    );

    await deployWalletBalancerProvider(addressesProvider.address);

    const testHelpers = await deployAaveProtocolTestHelpers(addressesProvider.address);

    await insertContractAddressInDb(eContractid.AaveProtocolTestHelpers, testHelpers.address);

});
