/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from 'ethers';
import {Listener, Provider} from 'ethers/providers';
import {Arrayish, BigNumber, BigNumberish, Interface} from 'ethers/utils';
import {TransactionOverrides, TypedEventDescription, TypedFunctionDescription} from '.';

interface FeeProviderInterface extends Interface {
  functions: {
    FEE_PROVIDER_REVISION: TypedFunctionDescription<{encode([]: []): string}>;

    calculateLoanOriginationFee: TypedFunctionDescription<{
      encode([_user, _amount]: [string, BigNumberish]): string;
    }>;

    getLoanOriginationFeePercentage: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    initialize: TypedFunctionDescription<{
      encode([_addressesProvider]: [string]): string;
    }>;

    originationFeePercentage: TypedFunctionDescription<{
      encode([]: []): string;
    }>;
  };

  events: {};
}

export class FeeProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): FeeProvider;
  attach(addressOrName: string): FeeProvider;
  deployed(): Promise<FeeProvider>;

  on(event: EventFilter | string, listener: Listener): FeeProvider;
  once(event: EventFilter | string, listener: Listener): FeeProvider;
  addListener(eventName: EventFilter | string, listener: Listener): FeeProvider;
  removeAllListeners(eventName: EventFilter | string): FeeProvider;
  removeListener(eventName: any, listener: Listener): FeeProvider;

  interface: FeeProviderInterface;

  functions: {
    FEE_PROVIDER_REVISION(): Promise<BigNumber>;

    calculateLoanOriginationFee(_user: string, _amount: BigNumberish): Promise<BigNumber>;

    getLoanOriginationFeePercentage(): Promise<BigNumber>;

    initialize(
      _addressesProvider: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    originationFeePercentage(): Promise<BigNumber>;
  };

  FEE_PROVIDER_REVISION(): Promise<BigNumber>;

  calculateLoanOriginationFee(_user: string, _amount: BigNumberish): Promise<BigNumber>;

  getLoanOriginationFeePercentage(): Promise<BigNumber>;

  initialize(
    _addressesProvider: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  originationFeePercentage(): Promise<BigNumber>;

  filters: {};

  estimate: {
    FEE_PROVIDER_REVISION(): Promise<BigNumber>;

    calculateLoanOriginationFee(_user: string, _amount: BigNumberish): Promise<BigNumber>;

    getLoanOriginationFeePercentage(): Promise<BigNumber>;

    initialize(_addressesProvider: string): Promise<BigNumber>;

    originationFeePercentage(): Promise<BigNumber>;
  };
}
