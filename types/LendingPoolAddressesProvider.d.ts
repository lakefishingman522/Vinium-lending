/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from 'ethers';
import {Listener, Provider} from 'ethers/providers';
import {Arrayish, BigNumber, BigNumberish, Interface} from 'ethers/utils';
import {TransactionOverrides, TypedEventDescription, TypedFunctionDescription} from '.';

interface LendingPoolAddressesProviderInterface extends Interface {
  functions: {
    getAddress: TypedFunctionDescription<{
      encode([_key]: [Arrayish]): string;
    }>;

    getFeeProvider: TypedFunctionDescription<{encode([]: []): string}>;

    getLendingPool: TypedFunctionDescription<{encode([]: []): string}>;

    getLendingPoolConfigurator: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getLendingPoolLiquidationManager: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getLendingPoolManager: TypedFunctionDescription<{encode([]: []): string}>;

    getLendingRateOracle: TypedFunctionDescription<{encode([]: []): string}>;

    getPriceOracle: TypedFunctionDescription<{encode([]: []): string}>;

    getTokenDistributor: TypedFunctionDescription<{encode([]: []): string}>;

    owner: TypedFunctionDescription<{encode([]: []): string}>;

    renounceOwnership: TypedFunctionDescription<{encode([]: []): string}>;

    setFeeProviderImpl: TypedFunctionDescription<{
      encode([_feeProvider]: [string]): string;
    }>;

    setLendingPoolConfiguratorImpl: TypedFunctionDescription<{
      encode([_configurator]: [string]): string;
    }>;

    setLendingPoolImpl: TypedFunctionDescription<{
      encode([_pool]: [string]): string;
    }>;

    setLendingPoolLiquidationManager: TypedFunctionDescription<{
      encode([_manager]: [string]): string;
    }>;

    setLendingPoolManager: TypedFunctionDescription<{
      encode([_lendingPoolManager]: [string]): string;
    }>;

    setLendingRateOracle: TypedFunctionDescription<{
      encode([_lendingRateOracle]: [string]): string;
    }>;

    setPriceOracle: TypedFunctionDescription<{
      encode([_priceOracle]: [string]): string;
    }>;

    setTokenDistributor: TypedFunctionDescription<{
      encode([_tokenDistributor]: [string]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;
  };

  events: {
    EthereumAddressUpdated: TypedEventDescription<{
      encodeTopics([newAddress]: [string | null]): string[];
    }>;

    FeeProviderUpdated: TypedEventDescription<{
      encodeTopics([newAddress]: [string | null]): string[];
    }>;

    LendingPoolConfiguratorUpdated: TypedEventDescription<{
      encodeTopics([newAddress]: [string | null]): string[];
    }>;

    LendingPoolLiquidationManagerUpdated: TypedEventDescription<{
      encodeTopics([newAddress]: [string | null]): string[];
    }>;

    LendingPoolManagerUpdated: TypedEventDescription<{
      encodeTopics([newAddress]: [string | null]): string[];
    }>;

    LendingPoolUpdated: TypedEventDescription<{
      encodeTopics([newAddress]: [string | null]): string[];
    }>;

    LendingRateOracleUpdated: TypedEventDescription<{
      encodeTopics([newAddress]: [string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [string | null, string | null]): string[];
    }>;

    PriceOracleUpdated: TypedEventDescription<{
      encodeTopics([newAddress]: [string | null]): string[];
    }>;

    ProxyCreated: TypedEventDescription<{
      encodeTopics([id, newAddress]: [null, string | null]): string[];
    }>;

    TokenDistributorUpdated: TypedEventDescription<{
      encodeTopics([newAddress]: [string | null]): string[];
    }>;
  };
}

export class LendingPoolAddressesProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): LendingPoolAddressesProvider;
  attach(addressOrName: string): LendingPoolAddressesProvider;
  deployed(): Promise<LendingPoolAddressesProvider>;

  on(event: EventFilter | string, listener: Listener): LendingPoolAddressesProvider;
  once(event: EventFilter | string, listener: Listener): LendingPoolAddressesProvider;
  addListener(eventName: EventFilter | string, listener: Listener): LendingPoolAddressesProvider;
  removeAllListeners(eventName: EventFilter | string): LendingPoolAddressesProvider;
  removeListener(eventName: any, listener: Listener): LendingPoolAddressesProvider;

  interface: LendingPoolAddressesProviderInterface;

  functions: {
    getAddress(_key: Arrayish): Promise<string>;

    getFeeProvider(): Promise<string>;

    getLendingPool(): Promise<string>;

    getLendingPoolConfigurator(): Promise<string>;

    getLendingPoolLiquidationManager(): Promise<string>;

    getLendingPoolManager(): Promise<string>;

    getLendingRateOracle(): Promise<string>;

    getPriceOracle(): Promise<string>;

    getTokenDistributor(): Promise<string>;

    owner(): Promise<string>;

    renounceOwnership(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    setFeeProviderImpl(
      _feeProvider: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setLendingPoolConfiguratorImpl(
      _configurator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setLendingPoolImpl(
      _pool: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setLendingPoolLiquidationManager(
      _manager: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setLendingPoolManager(
      _lendingPoolManager: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setLendingRateOracle(
      _lendingRateOracle: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setPriceOracle(
      _priceOracle: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setTokenDistributor(
      _tokenDistributor: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getAddress(_key: Arrayish): Promise<string>;

  getFeeProvider(): Promise<string>;

  getLendingPool(): Promise<string>;

  getLendingPoolConfigurator(): Promise<string>;

  getLendingPoolLiquidationManager(): Promise<string>;

  getLendingPoolManager(): Promise<string>;

  getLendingRateOracle(): Promise<string>;

  getPriceOracle(): Promise<string>;

  getTokenDistributor(): Promise<string>;

  owner(): Promise<string>;

  renounceOwnership(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  setFeeProviderImpl(
    _feeProvider: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setLendingPoolConfiguratorImpl(
    _configurator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setLendingPoolImpl(_pool: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;

  setLendingPoolLiquidationManager(
    _manager: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setLendingPoolManager(
    _lendingPoolManager: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setLendingRateOracle(
    _lendingRateOracle: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setPriceOracle(
    _priceOracle: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setTokenDistributor(
    _tokenDistributor: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    EthereumAddressUpdated(newAddress: string | null): EventFilter;

    FeeProviderUpdated(newAddress: string | null): EventFilter;

    LendingPoolConfiguratorUpdated(newAddress: string | null): EventFilter;

    LendingPoolLiquidationManagerUpdated(newAddress: string | null): EventFilter;

    LendingPoolManagerUpdated(newAddress: string | null): EventFilter;

    LendingPoolUpdated(newAddress: string | null): EventFilter;

    LendingRateOracleUpdated(newAddress: string | null): EventFilter;

    OwnershipTransferred(previousOwner: string | null, newOwner: string | null): EventFilter;

    PriceOracleUpdated(newAddress: string | null): EventFilter;

    ProxyCreated(id: null, newAddress: string | null): EventFilter;

    TokenDistributorUpdated(newAddress: string | null): EventFilter;
  };

  estimate: {
    getAddress(_key: Arrayish): Promise<BigNumber>;

    getFeeProvider(): Promise<BigNumber>;

    getLendingPool(): Promise<BigNumber>;

    getLendingPoolConfigurator(): Promise<BigNumber>;

    getLendingPoolLiquidationManager(): Promise<BigNumber>;

    getLendingPoolManager(): Promise<BigNumber>;

    getLendingRateOracle(): Promise<BigNumber>;

    getPriceOracle(): Promise<BigNumber>;

    getTokenDistributor(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    renounceOwnership(): Promise<BigNumber>;

    setFeeProviderImpl(_feeProvider: string): Promise<BigNumber>;

    setLendingPoolConfiguratorImpl(_configurator: string): Promise<BigNumber>;

    setLendingPoolImpl(_pool: string): Promise<BigNumber>;

    setLendingPoolLiquidationManager(_manager: string): Promise<BigNumber>;

    setLendingPoolManager(_lendingPoolManager: string): Promise<BigNumber>;

    setLendingRateOracle(_lendingRateOracle: string): Promise<BigNumber>;

    setPriceOracle(_priceOracle: string): Promise<BigNumber>;

    setTokenDistributor(_tokenDistributor: string): Promise<BigNumber>;

    transferOwnership(newOwner: string): Promise<BigNumber>;
  };
}
