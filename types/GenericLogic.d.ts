/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction} from 'ethers';
import {Contract, ContractTransaction, CallOverrides} from '@ethersproject/contracts';
import {BytesLike} from '@ethersproject/bytes';
import {Listener, Provider} from '@ethersproject/providers';
import {FunctionFragment, EventFragment, Result} from '@ethersproject/abi';

interface GenericLogicInterface extends ethers.utils.Interface {
  functions: {
    'HEALTH_FACTOR_LIQUIDATION_THRESHOLD()': FunctionFragment;
    'calculateAvailableBorrowsETH(uint256,uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'HEALTH_FACTOR_LIQUIDATION_THRESHOLD',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateAvailableBorrowsETH',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'HEALTH_FACTOR_LIQUIDATION_THRESHOLD',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'calculateAvailableBorrowsETH', data: BytesLike): Result;

  events: {};
}

export class GenericLogic extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GenericLogicInterface;

  functions: {
    HEALTH_FACTOR_LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'HEALTH_FACTOR_LIQUIDATION_THRESHOLD()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    calculateAvailableBorrowsETH(
      collateralBalanceETH: BigNumberish,
      borrowBalanceETH: BigNumberish,
      ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'calculateAvailableBorrowsETH(uint256,uint256,uint256)'(
      collateralBalanceETH: BigNumberish,
      borrowBalanceETH: BigNumberish,
      ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  HEALTH_FACTOR_LIQUIDATION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  'HEALTH_FACTOR_LIQUIDATION_THRESHOLD()'(overrides?: CallOverrides): Promise<BigNumber>;

  calculateAvailableBorrowsETH(
    collateralBalanceETH: BigNumberish,
    borrowBalanceETH: BigNumberish,
    ltv: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'calculateAvailableBorrowsETH(uint256,uint256,uint256)'(
    collateralBalanceETH: BigNumberish,
    borrowBalanceETH: BigNumberish,
    ltv: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    HEALTH_FACTOR_LIQUIDATION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    'HEALTH_FACTOR_LIQUIDATION_THRESHOLD()'(overrides?: CallOverrides): Promise<BigNumber>;

    calculateAvailableBorrowsETH(
      collateralBalanceETH: BigNumberish,
      borrowBalanceETH: BigNumberish,
      ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateAvailableBorrowsETH(uint256,uint256,uint256)'(
      collateralBalanceETH: BigNumberish,
      borrowBalanceETH: BigNumberish,
      ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    HEALTH_FACTOR_LIQUIDATION_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    'HEALTH_FACTOR_LIQUIDATION_THRESHOLD()'(overrides?: CallOverrides): Promise<BigNumber>;

    calculateAvailableBorrowsETH(
      collateralBalanceETH: BigNumberish,
      borrowBalanceETH: BigNumberish,
      ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateAvailableBorrowsETH(uint256,uint256,uint256)'(
      collateralBalanceETH: BigNumberish,
      borrowBalanceETH: BigNumberish,
      ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    HEALTH_FACTOR_LIQUIDATION_THRESHOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'HEALTH_FACTOR_LIQUIDATION_THRESHOLD()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateAvailableBorrowsETH(
      collateralBalanceETH: BigNumberish,
      borrowBalanceETH: BigNumberish,
      ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'calculateAvailableBorrowsETH(uint256,uint256,uint256)'(
      collateralBalanceETH: BigNumberish,
      borrowBalanceETH: BigNumberish,
      ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
