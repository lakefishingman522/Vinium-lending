/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from ".";
import { MockKyberProxy } from "./MockKyberProxy";

export class MockKyberProxyFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _tokenToBurn: string,
    overrides?: TransactionOverrides
  ): Promise<MockKyberProxy> {
    return super.deploy(_tokenToBurn, overrides) as Promise<MockKyberProxy>;
  }
  getDeployTransaction(
    _tokenToBurn: string,
    overrides?: TransactionOverrides
  ): UnsignedTransaction {
    return super.getDeployTransaction(_tokenToBurn, overrides);
  }
  attach(address: string): MockKyberProxy {
    return super.attach(address) as MockKyberProxy;
  }
  connect(signer: Signer): MockKyberProxyFactory {
    return super.connect(signer) as MockKyberProxyFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockKyberProxy {
    return new Contract(address, _abi, signerOrProvider) as MockKyberProxy;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract MintableERC20",
        name: "_tokenToBurn",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "tokenToBurn",
    outputs: [
      {
        internalType: "contract MintableERC20",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_fromToken",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "contract IERC20",
        name: "_toToken",
        type: "address"
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_maxAmount",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "minConversionRate",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_referral",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_filtering",
        type: "bytes"
      }
    ],
    name: "tradeWithHint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109203803806109208339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061088c806100946000396000f3fe6080604052600436106100295760003560e01c806329589f611461002e5780634f1b86eb1461015a575b600080fd5b610144600480360361010081101561004557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561010057600080fd5b82018360208201111561011257600080fd5b8035906020019184600183028401116401000000008311171561013457600080fd5b90919293919293905050506101b1565b6040518082815260200191505060405180910390f35b34801561016657600080fd5b5061016f6103b0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a0712d68670de0b6b3a76400006040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050506040513d602081101561025957600080fd5b81019080805190602001909291905050506102dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f54524144455f574954485f48494e542e205265766572746564206d696e74282981525060200191505060405180910390fd5b6102e46103d5565b73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16146103445761034333308b8d73ffffffffffffffffffffffffffffffffffffffff166103f1909392919063ffffffff16565b5b61039833670de0b6b3a76400006000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166104de9092919063ffffffff16565b670de0b6b3a764000090509998505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee905090565b6104d8846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610596565b50505050565b6105918363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610596565b505050565b6105b58273ffffffffffffffffffffffffffffffffffffffff166107e1565b610627576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e74726163740081525060200191505060405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b602083106106765780518252602082019150602081019050602083039250610653565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146106d8576040519150601f19603f3d011682016040523d82523d6000602084013e6106dd565b606091505b509150915081610755576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656481525060200191505060405180910390fd5b6000815111156107db5780806020019051602081101561077457600080fd5b81019080805190602001909291905050506107da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061082d602a913960400191505060405180910390fd5b5b50505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561082357506000801b8214155b9250505091905056fe5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220e4edc96bf0a1cf3ebc50d752e471c20c700219387601db4e22992b5dd725cdca64736f6c63430006080033";
