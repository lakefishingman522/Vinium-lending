/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { AddressStorage } from "./AddressStorage";

export class AddressStorageFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<AddressStorage> {
    return super.deploy(overrides || {}) as Promise<AddressStorage>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AddressStorage {
    return super.attach(address) as AddressStorage;
  }
  connect(signer: Signer): AddressStorageFactory {
    return super.connect(signer) as AddressStorageFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressStorage {
    return new Contract(address, _abi, signerOrProvider) as AddressStorage;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_key",
        type: "bytes32"
      }
    ],
    name: "getAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060b48061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806321f8a72114602d575b600080fd5b604760048036036020811015604157600080fd5b50356063565b604080516001600160a01b039092168252519081900360200190f35b6000908152602081905260409020546001600160a01b03169056fea26469706673582212205a3bec750b47179f69d22d5e755ed1204462ef5133ac5e5edfa230947921558064736f6c63430006080033";
