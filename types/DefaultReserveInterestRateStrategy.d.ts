/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction} from 'ethers';
import {Contract, ContractTransaction, CallOverrides} from '@ethersproject/contracts';
import {BytesLike} from '@ethersproject/bytes';
import {Listener, Provider} from '@ethersproject/providers';
import {FunctionFragment, EventFragment, Result} from '@ethersproject/abi';

interface DefaultReserveInterestRateStrategyInterface extends ethers.utils.Interface {
  functions: {
    'EXCESS_UTILIZATION_RATE()': FunctionFragment;
    'OPTIMAL_UTILIZATION_RATE()': FunctionFragment;
    'addressesProvider()': FunctionFragment;
    'calculateInterestRates(address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'getBaseVariableBorrowRate()': FunctionFragment;
    'getStableRateSlope1()': FunctionFragment;
    'getStableRateSlope2()': FunctionFragment;
    'getVariableRateSlope1()': FunctionFragment;
    'getVariableRateSlope2()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'EXCESS_UTILIZATION_RATE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'OPTIMAL_UTILIZATION_RATE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addressesProvider', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'calculateInterestRates',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'getBaseVariableBorrowRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getStableRateSlope1', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getStableRateSlope2', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getVariableRateSlope1', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getVariableRateSlope2', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'EXCESS_UTILIZATION_RATE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'OPTIMAL_UTILIZATION_RATE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addressesProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateInterestRates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBaseVariableBorrowRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStableRateSlope1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStableRateSlope2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVariableRateSlope1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVariableRateSlope2', data: BytesLike): Result;

  events: {};
}

export class DefaultReserveInterestRateStrategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DefaultReserveInterestRateStrategyInterface;

  functions: {
    EXCESS_UTILIZATION_RATE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'EXCESS_UTILIZATION_RATE()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    OPTIMAL_UTILIZATION_RATE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'OPTIMAL_UTILIZATION_RATE()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    addressesProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'addressesProvider()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    calculateInterestRates(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      currentLiquidityRate: BigNumber;
      currentStableBorrowRate: BigNumber;
      currentVariableBorrowRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    'calculateInterestRates(address,uint256,uint256,uint256,uint256)'(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      currentLiquidityRate: BigNumber;
      currentStableBorrowRate: BigNumber;
      currentVariableBorrowRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getBaseVariableBorrowRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getBaseVariableBorrowRate()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getStableRateSlope1(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getStableRateSlope1()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getStableRateSlope2(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getStableRateSlope2()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getVariableRateSlope1(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getVariableRateSlope1()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getVariableRateSlope2(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getVariableRateSlope2()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  EXCESS_UTILIZATION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  'EXCESS_UTILIZATION_RATE()'(overrides?: CallOverrides): Promise<BigNumber>;

  OPTIMAL_UTILIZATION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  'OPTIMAL_UTILIZATION_RATE()'(overrides?: CallOverrides): Promise<BigNumber>;

  addressesProvider(overrides?: CallOverrides): Promise<string>;

  'addressesProvider()'(overrides?: CallOverrides): Promise<string>;

  calculateInterestRates(
    _reserve: string,
    _availableLiquidity: BigNumberish,
    _totalBorrowsStable: BigNumberish,
    _totalBorrowsVariable: BigNumberish,
    _averageStableBorrowRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    currentLiquidityRate: BigNumber;
    currentStableBorrowRate: BigNumber;
    currentVariableBorrowRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  'calculateInterestRates(address,uint256,uint256,uint256,uint256)'(
    _reserve: string,
    _availableLiquidity: BigNumberish,
    _totalBorrowsStable: BigNumberish,
    _totalBorrowsVariable: BigNumberish,
    _averageStableBorrowRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    currentLiquidityRate: BigNumber;
    currentStableBorrowRate: BigNumber;
    currentVariableBorrowRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  getBaseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  'getBaseVariableBorrowRate()'(overrides?: CallOverrides): Promise<BigNumber>;

  getStableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

  'getStableRateSlope1()'(overrides?: CallOverrides): Promise<BigNumber>;

  getStableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

  'getStableRateSlope2()'(overrides?: CallOverrides): Promise<BigNumber>;

  getVariableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

  'getVariableRateSlope1()'(overrides?: CallOverrides): Promise<BigNumber>;

  getVariableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

  'getVariableRateSlope2()'(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    EXCESS_UTILIZATION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    'EXCESS_UTILIZATION_RATE()'(overrides?: CallOverrides): Promise<BigNumber>;

    OPTIMAL_UTILIZATION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    'OPTIMAL_UTILIZATION_RATE()'(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<string>;

    'addressesProvider()'(overrides?: CallOverrides): Promise<string>;

    calculateInterestRates(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      currentLiquidityRate: BigNumber;
      currentStableBorrowRate: BigNumber;
      currentVariableBorrowRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    'calculateInterestRates(address,uint256,uint256,uint256,uint256)'(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      currentLiquidityRate: BigNumber;
      currentStableBorrowRate: BigNumber;
      currentVariableBorrowRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getBaseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    'getBaseVariableBorrowRate()'(overrides?: CallOverrides): Promise<BigNumber>;

    getStableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    'getStableRateSlope1()'(overrides?: CallOverrides): Promise<BigNumber>;

    getStableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    'getStableRateSlope2()'(overrides?: CallOverrides): Promise<BigNumber>;

    getVariableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    'getVariableRateSlope1()'(overrides?: CallOverrides): Promise<BigNumber>;

    getVariableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    'getVariableRateSlope2()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    EXCESS_UTILIZATION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    'EXCESS_UTILIZATION_RATE()'(overrides?: CallOverrides): Promise<BigNumber>;

    OPTIMAL_UTILIZATION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    'OPTIMAL_UTILIZATION_RATE()'(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    'addressesProvider()'(overrides?: CallOverrides): Promise<BigNumber>;

    calculateInterestRates(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateInterestRates(address,uint256,uint256,uint256,uint256)'(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    'getBaseVariableBorrowRate()'(overrides?: CallOverrides): Promise<BigNumber>;

    getStableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    'getStableRateSlope1()'(overrides?: CallOverrides): Promise<BigNumber>;

    getStableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    'getStableRateSlope2()'(overrides?: CallOverrides): Promise<BigNumber>;

    getVariableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    'getVariableRateSlope1()'(overrides?: CallOverrides): Promise<BigNumber>;

    getVariableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    'getVariableRateSlope2()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    EXCESS_UTILIZATION_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'EXCESS_UTILIZATION_RATE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPTIMAL_UTILIZATION_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'OPTIMAL_UTILIZATION_RATE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'addressesProvider()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateInterestRates(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'calculateInterestRates(address,uint256,uint256,uint256,uint256)'(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseVariableBorrowRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getBaseVariableBorrowRate()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStableRateSlope1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getStableRateSlope1()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStableRateSlope2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getStableRateSlope2()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVariableRateSlope1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getVariableRateSlope1()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVariableRateSlope2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getVariableRateSlope2()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
