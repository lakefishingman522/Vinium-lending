/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface DefaultReserveInterestRateStrategyInterface extends Interface {
  functions: {
    EXCESS_UTILIZATION_RATE: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    OPTIMAL_UTILIZATION_RATE: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    addressesProvider: TypedFunctionDescription<{ encode([]: []): string }>;

    baseVariableBorrowRate: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    calculateInterestRates: TypedFunctionDescription<{
      encode([
        _reserve,
        _availableLiquidity,
        _totalBorrowsStable,
        _totalBorrowsVariable,
        _averageStableBorrowRate
      ]: [
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    getBaseVariableBorrowRate: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getStableRateSlope1: TypedFunctionDescription<{ encode([]: []): string }>;

    getStableRateSlope2: TypedFunctionDescription<{ encode([]: []): string }>;

    getVariableRateSlope1: TypedFunctionDescription<{ encode([]: []): string }>;

    getVariableRateSlope2: TypedFunctionDescription<{ encode([]: []): string }>;

    reserve: TypedFunctionDescription<{ encode([]: []): string }>;

    stableRateSlope1: TypedFunctionDescription<{ encode([]: []): string }>;

    stableRateSlope2: TypedFunctionDescription<{ encode([]: []): string }>;

    variableRateSlope1: TypedFunctionDescription<{ encode([]: []): string }>;

    variableRateSlope2: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class DefaultReserveInterestRateStrategy extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): DefaultReserveInterestRateStrategy;
  attach(addressOrName: string): DefaultReserveInterestRateStrategy;
  deployed(): Promise<DefaultReserveInterestRateStrategy>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): DefaultReserveInterestRateStrategy;
  once(
    event: EventFilter | string,
    listener: Listener
  ): DefaultReserveInterestRateStrategy;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): DefaultReserveInterestRateStrategy;
  removeAllListeners(
    eventName: EventFilter | string
  ): DefaultReserveInterestRateStrategy;
  removeListener(
    eventName: any,
    listener: Listener
  ): DefaultReserveInterestRateStrategy;

  interface: DefaultReserveInterestRateStrategyInterface;

  functions: {
    EXCESS_UTILIZATION_RATE(): Promise<BigNumber>;

    OPTIMAL_UTILIZATION_RATE(): Promise<BigNumber>;

    addressesProvider(): Promise<string>;

    baseVariableBorrowRate(): Promise<BigNumber>;

    calculateInterestRates(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish
    ): Promise<{
      currentLiquidityRate: BigNumber;
      currentStableBorrowRate: BigNumber;
      currentVariableBorrowRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getBaseVariableBorrowRate(): Promise<BigNumber>;

    getStableRateSlope1(): Promise<BigNumber>;

    getStableRateSlope2(): Promise<BigNumber>;

    getVariableRateSlope1(): Promise<BigNumber>;

    getVariableRateSlope2(): Promise<BigNumber>;

    reserve(): Promise<string>;

    stableRateSlope1(): Promise<BigNumber>;

    stableRateSlope2(): Promise<BigNumber>;

    variableRateSlope1(): Promise<BigNumber>;

    variableRateSlope2(): Promise<BigNumber>;
  };

  EXCESS_UTILIZATION_RATE(): Promise<BigNumber>;

  OPTIMAL_UTILIZATION_RATE(): Promise<BigNumber>;

  addressesProvider(): Promise<string>;

  baseVariableBorrowRate(): Promise<BigNumber>;

  calculateInterestRates(
    _reserve: string,
    _availableLiquidity: BigNumberish,
    _totalBorrowsStable: BigNumberish,
    _totalBorrowsVariable: BigNumberish,
    _averageStableBorrowRate: BigNumberish
  ): Promise<{
    currentLiquidityRate: BigNumber;
    currentStableBorrowRate: BigNumber;
    currentVariableBorrowRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  getBaseVariableBorrowRate(): Promise<BigNumber>;

  getStableRateSlope1(): Promise<BigNumber>;

  getStableRateSlope2(): Promise<BigNumber>;

  getVariableRateSlope1(): Promise<BigNumber>;

  getVariableRateSlope2(): Promise<BigNumber>;

  reserve(): Promise<string>;

  stableRateSlope1(): Promise<BigNumber>;

  stableRateSlope2(): Promise<BigNumber>;

  variableRateSlope1(): Promise<BigNumber>;

  variableRateSlope2(): Promise<BigNumber>;

  filters: {};

  estimate: {
    EXCESS_UTILIZATION_RATE(): Promise<BigNumber>;

    OPTIMAL_UTILIZATION_RATE(): Promise<BigNumber>;

    addressesProvider(): Promise<BigNumber>;

    baseVariableBorrowRate(): Promise<BigNumber>;

    calculateInterestRates(
      _reserve: string,
      _availableLiquidity: BigNumberish,
      _totalBorrowsStable: BigNumberish,
      _totalBorrowsVariable: BigNumberish,
      _averageStableBorrowRate: BigNumberish
    ): Promise<BigNumber>;

    getBaseVariableBorrowRate(): Promise<BigNumber>;

    getStableRateSlope1(): Promise<BigNumber>;

    getStableRateSlope2(): Promise<BigNumber>;

    getVariableRateSlope1(): Promise<BigNumber>;

    getVariableRateSlope2(): Promise<BigNumber>;

    reserve(): Promise<BigNumber>;

    stableRateSlope1(): Promise<BigNumber>;

    stableRateSlope2(): Promise<BigNumber>;

    variableRateSlope1(): Promise<BigNumber>;

    variableRateSlope2(): Promise<BigNumber>;
  };
}
