/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from 'ethers';
import {Listener, Provider} from 'ethers/providers';
import {Arrayish, BigNumber, BigNumberish, Interface} from 'ethers/utils';
import {TransactionOverrides, TypedEventDescription, TypedFunctionDescription} from '.';

interface WalletBalanceProviderInterface extends Interface {
  functions: {
    balanceOf: TypedFunctionDescription<{
      encode([_user, _token]: [string, string]): string;
    }>;

    batchBalanceOf: TypedFunctionDescription<{
      encode([_users, _tokens]: [string[], string[]]): string;
    }>;

    getUserWalletBalances: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;
  };

  events: {};
}

export class WalletBalanceProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): WalletBalanceProvider;
  attach(addressOrName: string): WalletBalanceProvider;
  deployed(): Promise<WalletBalanceProvider>;

  on(event: EventFilter | string, listener: Listener): WalletBalanceProvider;
  once(event: EventFilter | string, listener: Listener): WalletBalanceProvider;
  addListener(eventName: EventFilter | string, listener: Listener): WalletBalanceProvider;
  removeAllListeners(eventName: EventFilter | string): WalletBalanceProvider;
  removeListener(eventName: any, listener: Listener): WalletBalanceProvider;

  interface: WalletBalanceProviderInterface;

  functions: {
    balanceOf(_user: string, _token: string): Promise<BigNumber>;

    batchBalanceOf(_users: string[], _tokens: string[]): Promise<BigNumber[]>;

    getUserWalletBalances(
      _user: string
    ): Promise<{
      0: string[];
      1: BigNumber[];
    }>;
  };

  balanceOf(_user: string, _token: string): Promise<BigNumber>;

  batchBalanceOf(_users: string[], _tokens: string[]): Promise<BigNumber[]>;

  getUserWalletBalances(
    _user: string
  ): Promise<{
    0: string[];
    1: BigNumber[];
  }>;

  filters: {};

  estimate: {
    balanceOf(_user: string, _token: string): Promise<BigNumber>;

    batchBalanceOf(_users: string[], _tokens: string[]): Promise<BigNumber>;

    getUserWalletBalances(_user: string): Promise<BigNumber>;
  };
}
