/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface WalletBalanceProviderInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address,address)": FunctionFragment;
    "batchBalanceOf(address[],address[])": FunctionFragment;
    "getUserWalletBalances(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBalanceOf",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWalletBalances",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserWalletBalances",
    data: BytesLike
  ): Result;

  events: {};
}

export class WalletBalanceProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: WalletBalanceProviderInterface;

  functions: {
    balanceOf(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address,address)"(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    batchBalanceOf(
      _users: string[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "batchBalanceOf(address[],address[])"(
      _users: string[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    getUserWalletBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
      1: BigNumber[];
    }>;

    "getUserWalletBalances(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
      1: BigNumber[];
    }>;
  };

  balanceOf(
    _user: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,address)"(
    _user: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchBalanceOf(
    _users: string[],
    _tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "batchBalanceOf(address[],address[])"(
    _users: string[],
    _tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserWalletBalances(
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string[];
    1: BigNumber[];
  }>;

  "getUserWalletBalances(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string[];
    1: BigNumber[];
  }>;

  callStatic: {
    balanceOf(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchBalanceOf(
      _users: string[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "batchBalanceOf(address[],address[])"(
      _users: string[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserWalletBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
      1: BigNumber[];
    }>;

    "getUserWalletBalances(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
      1: BigNumber[];
    }>;
  };

  filters: {};

  estimateGas: {
    balanceOf(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchBalanceOf(
      _users: string[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "batchBalanceOf(address[],address[])"(
      _users: string[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserWalletBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserWalletBalances(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,address)"(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchBalanceOf(
      _users: string[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "batchBalanceOf(address[],address[])"(
      _users: string[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserWalletBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserWalletBalances(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
