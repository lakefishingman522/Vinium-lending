/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface LendingRateOracleInterface extends Interface {
  functions: {
    getMarketBorrowRate: TypedFunctionDescription<{
      encode([_asset]: [string]): string;
    }>;

    getMarketLiquidityRate: TypedFunctionDescription<{
      encode([_asset]: [string]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    setMarketBorrowRate: TypedFunctionDescription<{
      encode([_asset, _rate]: [string, BigNumberish]): string;
    }>;

    setMarketLiquidityRate: TypedFunctionDescription<{
      encode([_asset, _rate]: [string, BigNumberish]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;
  };

  events: {
    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class LendingRateOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): LendingRateOracle;
  attach(addressOrName: string): LendingRateOracle;
  deployed(): Promise<LendingRateOracle>;

  on(event: EventFilter | string, listener: Listener): LendingRateOracle;
  once(event: EventFilter | string, listener: Listener): LendingRateOracle;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): LendingRateOracle;
  removeAllListeners(eventName: EventFilter | string): LendingRateOracle;
  removeListener(eventName: any, listener: Listener): LendingRateOracle;

  interface: LendingRateOracleInterface;

  functions: {
    getMarketBorrowRate(_asset: string): Promise<BigNumber>;

    getMarketLiquidityRate(_asset: string): Promise<BigNumber>;

    owner(): Promise<string>;

    renounceOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setMarketBorrowRate(
      _asset: string,
      _rate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setMarketLiquidityRate(
      _asset: string,
      _rate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getMarketBorrowRate(_asset: string): Promise<BigNumber>;

  getMarketLiquidityRate(_asset: string): Promise<BigNumber>;

  owner(): Promise<string>;

  renounceOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setMarketBorrowRate(
    _asset: string,
    _rate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setMarketLiquidityRate(
    _asset: string,
    _rate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    getMarketBorrowRate(_asset: string): Promise<BigNumber>;

    getMarketLiquidityRate(_asset: string): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    renounceOwnership(): Promise<BigNumber>;

    setMarketBorrowRate(
      _asset: string,
      _rate: BigNumberish
    ): Promise<BigNumber>;

    setMarketLiquidityRate(
      _asset: string,
      _rate: BigNumberish
    ): Promise<BigNumber>;

    transferOwnership(newOwner: string): Promise<BigNumber>;
  };
}
