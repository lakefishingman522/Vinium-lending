/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface Ierc20BurnableInterface extends Interface {
  functions: {
    burn: TypedFunctionDescription<{
      encode([amount]: [BigNumberish]): string;
    }>;

    burnFrom: TypedFunctionDescription<{
      encode([account, amount]: [string, BigNumberish]): string;
    }>;
  };

  events: {};
}

export class Ierc20Burnable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Ierc20Burnable;
  attach(addressOrName: string): Ierc20Burnable;
  deployed(): Promise<Ierc20Burnable>;

  on(event: EventFilter | string, listener: Listener): Ierc20Burnable;
  once(event: EventFilter | string, listener: Listener): Ierc20Burnable;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): Ierc20Burnable;
  removeAllListeners(eventName: EventFilter | string): Ierc20Burnable;
  removeListener(eventName: any, listener: Listener): Ierc20Burnable;

  interface: Ierc20BurnableInterface;

  functions: {
    burn(
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  burn(
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    burn(amount: BigNumberish): Promise<BigNumber>;

    burnFrom(account: string, amount: BigNumberish): Promise<BigNumber>;
  };
}
