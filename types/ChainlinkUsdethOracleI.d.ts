/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from 'ethers';
import {Listener, Provider} from 'ethers/providers';
import {Arrayish, BigNumber, BigNumberish, Interface} from 'ethers/utils';
import {TransactionOverrides, TypedEventDescription, TypedFunctionDescription} from '.';

interface ChainlinkUsdethOracleIInterface extends Interface {
  functions: {};

  events: {
    AnswerUpdated: TypedEventDescription<{
      encodeTopics([current, answerId]: [BigNumberish | null, BigNumberish | null]): string[];
    }>;
  };
}

export class ChainlinkUsdethOracleI extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ChainlinkUsdethOracleI;
  attach(addressOrName: string): ChainlinkUsdethOracleI;
  deployed(): Promise<ChainlinkUsdethOracleI>;

  on(event: EventFilter | string, listener: Listener): ChainlinkUsdethOracleI;
  once(event: EventFilter | string, listener: Listener): ChainlinkUsdethOracleI;
  addListener(eventName: EventFilter | string, listener: Listener): ChainlinkUsdethOracleI;
  removeAllListeners(eventName: EventFilter | string): ChainlinkUsdethOracleI;
  removeListener(eventName: any, listener: Listener): ChainlinkUsdethOracleI;

  interface: ChainlinkUsdethOracleIInterface;

  functions: {};

  filters: {
    AnswerUpdated(current: BigNumberish | null, answerId: BigNumberish | null): EventFilter;
  };

  estimate: {};
}
