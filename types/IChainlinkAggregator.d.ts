/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from 'ethers';
import {Listener, Provider} from 'ethers/providers';
import {Arrayish, BigNumber, BigNumberish, Interface} from 'ethers/utils';
import {TransactionOverrides, TypedEventDescription, TypedFunctionDescription} from '.';

interface IChainlinkAggregatorInterface extends Interface {
  functions: {
    getAnswer: TypedFunctionDescription<{
      encode([roundId]: [BigNumberish]): string;
    }>;

    getTimestamp: TypedFunctionDescription<{
      encode([roundId]: [BigNumberish]): string;
    }>;

    latestAnswer: TypedFunctionDescription<{encode([]: []): string}>;

    latestRound: TypedFunctionDescription<{encode([]: []): string}>;

    latestTimestamp: TypedFunctionDescription<{encode([]: []): string}>;
  };

  events: {
    AnswerUpdated: TypedEventDescription<{
      encodeTopics([current, roundId, timestamp]: [
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    NewRound: TypedEventDescription<{
      encodeTopics([roundId, startedBy]: [BigNumberish | null, string | null]): string[];
    }>;
  };
}

export class IChainlinkAggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IChainlinkAggregator;
  attach(addressOrName: string): IChainlinkAggregator;
  deployed(): Promise<IChainlinkAggregator>;

  on(event: EventFilter | string, listener: Listener): IChainlinkAggregator;
  once(event: EventFilter | string, listener: Listener): IChainlinkAggregator;
  addListener(eventName: EventFilter | string, listener: Listener): IChainlinkAggregator;
  removeAllListeners(eventName: EventFilter | string): IChainlinkAggregator;
  removeListener(eventName: any, listener: Listener): IChainlinkAggregator;

  interface: IChainlinkAggregatorInterface;

  functions: {
    getAnswer(roundId: BigNumberish): Promise<BigNumber>;

    getTimestamp(roundId: BigNumberish): Promise<BigNumber>;

    latestAnswer(): Promise<BigNumber>;

    latestRound(): Promise<BigNumber>;

    latestTimestamp(): Promise<BigNumber>;
  };

  getAnswer(roundId: BigNumberish): Promise<BigNumber>;

  getTimestamp(roundId: BigNumberish): Promise<BigNumber>;

  latestAnswer(): Promise<BigNumber>;

  latestRound(): Promise<BigNumber>;

  latestTimestamp(): Promise<BigNumber>;

  filters: {
    AnswerUpdated(
      current: BigNumberish | null,
      roundId: BigNumberish | null,
      timestamp: null
    ): EventFilter;

    NewRound(roundId: BigNumberish | null, startedBy: string | null): EventFilter;
  };

  estimate: {
    getAnswer(roundId: BigNumberish): Promise<BigNumber>;

    getTimestamp(roundId: BigNumberish): Promise<BigNumber>;

    latestAnswer(): Promise<BigNumber>;

    latestRound(): Promise<BigNumber>;

    latestTimestamp(): Promise<BigNumber>;
  };
}
