/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from 'ethers';
import {Listener, Provider} from 'ethers/providers';
import {Arrayish, BigNumber, BigNumberish, Interface} from 'ethers/utils';
import {TransactionOverrides, TypedEventDescription, TypedFunctionDescription} from '.';

interface ILendingPoolAddressesProviderRegistryInterface extends Interface {
  functions: {
    getAddressesProvidersList: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    isAddressesProviderRegistered: TypedFunctionDescription<{
      encode([_provider]: [string]): string;
    }>;

    registerAddressesProvider: TypedFunctionDescription<{
      encode([_provider, _id]: [string, BigNumberish]): string;
    }>;

    unregisterAddressesProvider: TypedFunctionDescription<{
      encode([_provider]: [string]): string;
    }>;
  };

  events: {};
}

export class ILendingPoolAddressesProviderRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ILendingPoolAddressesProviderRegistry;
  attach(addressOrName: string): ILendingPoolAddressesProviderRegistry;
  deployed(): Promise<ILendingPoolAddressesProviderRegistry>;

  on(event: EventFilter | string, listener: Listener): ILendingPoolAddressesProviderRegistry;
  once(event: EventFilter | string, listener: Listener): ILendingPoolAddressesProviderRegistry;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ILendingPoolAddressesProviderRegistry;
  removeAllListeners(eventName: EventFilter | string): ILendingPoolAddressesProviderRegistry;
  removeListener(eventName: any, listener: Listener): ILendingPoolAddressesProviderRegistry;

  interface: ILendingPoolAddressesProviderRegistryInterface;

  functions: {
    getAddressesProvidersList(): Promise<string[]>;

    isAddressesProviderRegistered(_provider: string): Promise<BigNumber>;

    registerAddressesProvider(
      _provider: string,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    unregisterAddressesProvider(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getAddressesProvidersList(): Promise<string[]>;

  isAddressesProviderRegistered(_provider: string): Promise<BigNumber>;

  registerAddressesProvider(
    _provider: string,
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  unregisterAddressesProvider(
    _provider: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    getAddressesProvidersList(): Promise<BigNumber>;

    isAddressesProviderRegistered(_provider: string): Promise<BigNumber>;

    registerAddressesProvider(_provider: string, _id: BigNumberish): Promise<BigNumber>;

    unregisterAddressesProvider(_provider: string): Promise<BigNumber>;
  };
}
