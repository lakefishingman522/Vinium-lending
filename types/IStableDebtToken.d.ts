/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction} from 'ethers';
import {Contract, ContractTransaction, Overrides, CallOverrides} from '@ethersproject/contracts';
import {BytesLike} from '@ethersproject/bytes';
import {Listener, Provider} from '@ethersproject/providers';
import {FunctionFragment, EventFragment, Result} from '@ethersproject/abi';

interface IStableDebtTokenInterface extends ethers.utils.Interface {
  functions: {
    'burn(address,uint256)': FunctionFragment;
    'getAverageStableRate()': FunctionFragment;
    'getUserLastUpdated(address)': FunctionFragment;
    'getUserStableRate(address)': FunctionFragment;
    'mint(address,uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'burn', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getAverageStableRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUserLastUpdated', values: [string]): string;
  encodeFunctionData(functionFragment: 'getUserStableRate', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAverageStableRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserLastUpdated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserStableRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;

  events: {};
}

export class IStableDebtToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IStableDebtTokenInterface;

  functions: {
    burn(user: string, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    'burn(address,uint256)'(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAverageStableRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getAverageStableRate()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getUserLastUpdated(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    'getUserLastUpdated(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    getUserStableRate(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getUserStableRate(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mint(
      user: string,
      amount: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'mint(address,uint256,uint256)'(
      user: string,
      amount: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  burn(user: string, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  'burn(address,uint256)'(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAverageStableRate(overrides?: CallOverrides): Promise<BigNumber>;

  'getAverageStableRate()'(overrides?: CallOverrides): Promise<BigNumber>;

  getUserLastUpdated(user: string, overrides?: CallOverrides): Promise<number>;

  'getUserLastUpdated(address)'(user: string, overrides?: CallOverrides): Promise<number>;

  getUserStableRate(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getUserStableRate(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    user: string,
    amount: BigNumberish,
    rate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'mint(address,uint256,uint256)'(
    user: string,
    amount: BigNumberish,
    rate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    burn(user: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'burn(address,uint256)'(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAverageStableRate(overrides?: CallOverrides): Promise<BigNumber>;

    'getAverageStableRate()'(overrides?: CallOverrides): Promise<BigNumber>;

    getUserLastUpdated(user: string, overrides?: CallOverrides): Promise<number>;

    'getUserLastUpdated(address)'(user: string, overrides?: CallOverrides): Promise<number>;

    getUserStableRate(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getUserStableRate(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      user: string,
      amount: BigNumberish,
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'mint(address,uint256,uint256)'(
      user: string,
      amount: BigNumberish,
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    burn(user: string, amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'burn(address,uint256)'(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAverageStableRate(overrides?: CallOverrides): Promise<BigNumber>;

    'getAverageStableRate()'(overrides?: CallOverrides): Promise<BigNumber>;

    getUserLastUpdated(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getUserLastUpdated(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserStableRate(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getUserStableRate(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      user: string,
      amount: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'mint(address,uint256,uint256)'(
      user: string,
      amount: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(user: string, amount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

    'burn(address,uint256)'(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAverageStableRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getAverageStableRate()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserLastUpdated(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getUserLastUpdated(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStableRate(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getUserStableRate(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      user: string,
      amount: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'mint(address,uint256,uint256)'(
      user: string,
      amount: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
