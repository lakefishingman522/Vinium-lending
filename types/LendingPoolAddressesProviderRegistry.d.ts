/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LendingPoolAddressesProviderRegistryInterface
  extends ethers.utils.Interface {
  functions: {
    "getAddressesProvidersList()": FunctionFragment;
    "isAddressesProviderRegistered(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerAddressesProvider(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unregisterAddressesProvider(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAddressesProvidersList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAddressesProviderRegistered",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAddressesProvider",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterAddressesProvider",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAddressesProvidersList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAddressesProviderRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAddressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterAddressesProvider",
    data: BytesLike
  ): Result;

  events: {
    "AddressesProviderRegistered(address)": EventFragment;
    "AddressesProviderUnregistered(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AddressesProviderRegistered"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AddressesProviderUnregistered"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class LendingPoolAddressesProviderRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LendingPoolAddressesProviderRegistryInterface;

  functions: {
    getAddressesProvidersList(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getAddressesProvidersList()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    isAddressesProviderRegistered(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "isAddressesProviderRegistered(address)"(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    registerAddressesProvider(
      _provider: string,
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerAddressesProvider(address,uint256)"(
      _provider: string,
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unregisterAddressesProvider(
      _provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unregisterAddressesProvider(address)"(
      _provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getAddressesProvidersList(overrides?: CallOverrides): Promise<string[]>;

  "getAddressesProvidersList()"(overrides?: CallOverrides): Promise<string[]>;

  isAddressesProviderRegistered(
    _provider: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "isAddressesProviderRegistered(address)"(
    _provider: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  registerAddressesProvider(
    _provider: string,
    _id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerAddressesProvider(address,uint256)"(
    _provider: string,
    _id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unregisterAddressesProvider(
    _provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unregisterAddressesProvider(address)"(
    _provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getAddressesProvidersList(overrides?: CallOverrides): Promise<string[]>;

    "getAddressesProvidersList()"(overrides?: CallOverrides): Promise<string[]>;

    isAddressesProviderRegistered(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAddressesProviderRegistered(address)"(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    registerAddressesProvider(
      _provider: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerAddressesProvider(address,uint256)"(
      _provider: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterAddressesProvider(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "unregisterAddressesProvider(address)"(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddressesProviderRegistered(newAddress: string | null): EventFilter;

    AddressesProviderUnregistered(newAddress: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    getAddressesProvidersList(overrides?: CallOverrides): Promise<BigNumber>;

    "getAddressesProvidersList()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAddressesProviderRegistered(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAddressesProviderRegistered(address)"(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerAddressesProvider(
      _provider: string,
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerAddressesProvider(address,uint256)"(
      _provider: string,
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unregisterAddressesProvider(
      _provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unregisterAddressesProvider(address)"(
      _provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAddressesProvidersList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddressesProvidersList()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAddressesProviderRegistered(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAddressesProviderRegistered(address)"(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerAddressesProvider(
      _provider: string,
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerAddressesProvider(address,uint256)"(
      _provider: string,
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unregisterAddressesProvider(
      _provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unregisterAddressesProvider(address)"(
      _provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
