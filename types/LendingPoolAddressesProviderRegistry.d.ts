/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface LendingPoolAddressesProviderRegistryInterface extends Interface {
  functions: {
    getAddressesProvidersList: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    isAddressesProviderRegistered: TypedFunctionDescription<{
      encode([_provider]: [string]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    registerAddressesProvider: TypedFunctionDescription<{
      encode([_provider, _id]: [string, BigNumberish]): string;
    }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    unregisterAddressesProvider: TypedFunctionDescription<{
      encode([_provider]: [string]): string;
    }>;
  };

  events: {
    AddressesProviderRegistered: TypedEventDescription<{
      encodeTopics([newAddress]: [string | null]): string[];
    }>;

    AddressesProviderUnregistered: TypedEventDescription<{
      encodeTopics([newAddress]: [string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class LendingPoolAddressesProviderRegistry extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): LendingPoolAddressesProviderRegistry;
  attach(addressOrName: string): LendingPoolAddressesProviderRegistry;
  deployed(): Promise<LendingPoolAddressesProviderRegistry>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): LendingPoolAddressesProviderRegistry;
  once(
    event: EventFilter | string,
    listener: Listener
  ): LendingPoolAddressesProviderRegistry;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): LendingPoolAddressesProviderRegistry;
  removeAllListeners(
    eventName: EventFilter | string
  ): LendingPoolAddressesProviderRegistry;
  removeListener(
    eventName: any,
    listener: Listener
  ): LendingPoolAddressesProviderRegistry;

  interface: LendingPoolAddressesProviderRegistryInterface;

  functions: {
    getAddressesProvidersList(): Promise<string[]>;

    isAddressesProviderRegistered(_provider: string): Promise<BigNumber>;

    owner(): Promise<string>;

    registerAddressesProvider(
      _provider: string,
      _id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    unregisterAddressesProvider(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getAddressesProvidersList(): Promise<string[]>;

  isAddressesProviderRegistered(_provider: string): Promise<BigNumber>;

  owner(): Promise<string>;

  registerAddressesProvider(
    _provider: string,
    _id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  unregisterAddressesProvider(
    _provider: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AddressesProviderRegistered(newAddress: string | null): EventFilter;

    AddressesProviderUnregistered(newAddress: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    getAddressesProvidersList(): Promise<BigNumber>;

    isAddressesProviderRegistered(_provider: string): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    registerAddressesProvider(
      _provider: string,
      _id: BigNumberish
    ): Promise<BigNumber>;

    renounceOwnership(): Promise<BigNumber>;

    transferOwnership(newOwner: string): Promise<BigNumber>;

    unregisterAddressesProvider(_provider: string): Promise<BigNumber>;
  };
}
