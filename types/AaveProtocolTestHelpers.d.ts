/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from 'ethers';
import {Listener, Provider} from 'ethers/providers';
import {Arrayish, BigNumber, BigNumberish, Interface} from 'ethers/utils';
import {TransactionOverrides, TypedEventDescription, TypedFunctionDescription} from '.';

interface AaveProtocolTestHelpersInterface extends Interface {
  functions: {
    ADDRESSES_PROVIDER: TypedFunctionDescription<{encode([]: []): string}>;

    getAllATokens: TypedFunctionDescription<{encode([]: []): string}>;

    getAllReservesTokens: TypedFunctionDescription<{encode([]: []): string}>;
  };

  events: {};
}

export class AaveProtocolTestHelpers extends Contract {
  connect(signerOrProvider: Signer | Provider | string): AaveProtocolTestHelpers;
  attach(addressOrName: string): AaveProtocolTestHelpers;
  deployed(): Promise<AaveProtocolTestHelpers>;

  on(event: EventFilter | string, listener: Listener): AaveProtocolTestHelpers;
  once(event: EventFilter | string, listener: Listener): AaveProtocolTestHelpers;
  addListener(eventName: EventFilter | string, listener: Listener): AaveProtocolTestHelpers;
  removeAllListeners(eventName: EventFilter | string): AaveProtocolTestHelpers;
  removeListener(eventName: any, listener: Listener): AaveProtocolTestHelpers;

  interface: AaveProtocolTestHelpersInterface;

  functions: {
    ADDRESSES_PROVIDER(): Promise<string>;

    getAllATokens(): Promise<{symbol: string; tokenAddress: string; 0: string; 1: string}[]>;

    getAllReservesTokens(): Promise<{symbol: string; tokenAddress: string; 0: string; 1: string}[]>;
  };

  ADDRESSES_PROVIDER(): Promise<string>;

  getAllATokens(): Promise<{symbol: string; tokenAddress: string; 0: string; 1: string}[]>;

  getAllReservesTokens(): Promise<{symbol: string; tokenAddress: string; 0: string; 1: string}[]>;

  filters: {};

  estimate: {
    ADDRESSES_PROVIDER(): Promise<BigNumber>;

    getAllATokens(): Promise<BigNumber>;

    getAllReservesTokens(): Promise<BigNumber>;
  };
}
