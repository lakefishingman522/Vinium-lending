/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AaveProtocolTestHelpersInterface extends ethers.utils.Interface {
  functions: {
    "ADDRESSES_PROVIDER()": FunctionFragment;
    "getAllATokens()": FunctionFragment;
    "getAllReservesTokens()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllATokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllReservesTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllATokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllReservesTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export class AaveProtocolTestHelpers extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AaveProtocolTestHelpersInterface;

  functions: {
    ADDRESSES_PROVIDER(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ADDRESSES_PROVIDER()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getAllATokens(
      overrides?: CallOverrides
    ): Promise<{
      0: { symbol: string; tokenAddress: string; 0: string; 1: string }[];
    }>;

    "getAllATokens()"(
      overrides?: CallOverrides
    ): Promise<{
      0: { symbol: string; tokenAddress: string; 0: string; 1: string }[];
    }>;

    getAllReservesTokens(
      overrides?: CallOverrides
    ): Promise<{
      0: { symbol: string; tokenAddress: string; 0: string; 1: string }[];
    }>;

    "getAllReservesTokens()"(
      overrides?: CallOverrides
    ): Promise<{
      0: { symbol: string; tokenAddress: string; 0: string; 1: string }[];
    }>;
  };

  ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

  "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<string>;

  getAllATokens(
    overrides?: CallOverrides
  ): Promise<{ symbol: string; tokenAddress: string; 0: string; 1: string }[]>;

  "getAllATokens()"(
    overrides?: CallOverrides
  ): Promise<{ symbol: string; tokenAddress: string; 0: string; 1: string }[]>;

  getAllReservesTokens(
    overrides?: CallOverrides
  ): Promise<{ symbol: string; tokenAddress: string; 0: string; 1: string }[]>;

  "getAllReservesTokens()"(
    overrides?: CallOverrides
  ): Promise<{ symbol: string; tokenAddress: string; 0: string; 1: string }[]>;

  callStatic: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

    "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<string>;

    getAllATokens(
      overrides?: CallOverrides
    ): Promise<
      { symbol: string; tokenAddress: string; 0: string; 1: string }[]
    >;

    "getAllATokens()"(
      overrides?: CallOverrides
    ): Promise<
      { symbol: string; tokenAddress: string; 0: string; 1: string }[]
    >;

    getAllReservesTokens(
      overrides?: CallOverrides
    ): Promise<
      { symbol: string; tokenAddress: string; 0: string; 1: string }[]
    >;

    "getAllReservesTokens()"(
      overrides?: CallOverrides
    ): Promise<
      { symbol: string; tokenAddress: string; 0: string; 1: string }[]
    >;
  };

  filters: {};

  estimateGas: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllATokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllATokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllReservesTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllReservesTokens()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESSES_PROVIDER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ADDRESSES_PROVIDER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllATokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllATokens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllReservesTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllReservesTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
