/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction} from 'ethers';
import {Contract, ContractTransaction, Overrides, CallOverrides} from '@ethersproject/contracts';
import {BytesLike} from '@ethersproject/bytes';
import {Listener, Provider} from '@ethersproject/providers';
import {FunctionFragment, EventFragment, Result} from '@ethersproject/abi';

interface LendingPoolLiquidationManagerInterface extends ethers.utils.Interface {
  functions: {
    'liquidationCall(address,address,address,uint256,bool)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'liquidationCall',
    values: [string, string, string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: 'liquidationCall', data: BytesLike): Result;

  events: {
    'LiquidationCall(address,address,address,uint256,uint256,address,bool)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'LiquidationCall'): EventFragment;
}

export class LendingPoolLiquidationManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LendingPoolLiquidationManagerInterface;

  functions: {
    liquidationCall(
      collateral: string,
      principal: string,
      user: string,
      purchaseAmount: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'liquidationCall(address,address,address,uint256,bool)'(
      collateral: string,
      principal: string,
      user: string,
      purchaseAmount: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  liquidationCall(
    collateral: string,
    principal: string,
    user: string,
    purchaseAmount: BigNumberish,
    receiveAToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'liquidationCall(address,address,address,uint256,bool)'(
    collateral: string,
    principal: string,
    user: string,
    purchaseAmount: BigNumberish,
    receiveAToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    liquidationCall(
      collateral: string,
      principal: string,
      user: string,
      purchaseAmount: BigNumberish,
      receiveAToken: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    'liquidationCall(address,address,address,uint256,bool)'(
      collateral: string,
      principal: string,
      user: string,
      purchaseAmount: BigNumberish,
      receiveAToken: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;
  };

  filters: {
    LiquidationCall(
      collateral: string | null,
      principal: string | null,
      user: string | null,
      purchaseAmount: null,
      liquidatedCollateralAmount: null,
      liquidator: null,
      receiveAToken: null
    ): EventFilter;
  };

  estimateGas: {
    liquidationCall(
      collateral: string,
      principal: string,
      user: string,
      purchaseAmount: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'liquidationCall(address,address,address,uint256,bool)'(
      collateral: string,
      principal: string,
      user: string,
      purchaseAmount: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    liquidationCall(
      collateral: string,
      principal: string,
      user: string,
      purchaseAmount: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'liquidationCall(address,address,address,uint256,bool)'(
      collateral: string,
      principal: string,
      user: string,
      purchaseAmount: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
