/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface UintStorageInterface extends Interface {
  functions: {
    getUint: TypedFunctionDescription<{ encode([_key]: [Arrayish]): string }>;
  };

  events: {};
}

export class UintStorage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): UintStorage;
  attach(addressOrName: string): UintStorage;
  deployed(): Promise<UintStorage>;

  on(event: EventFilter | string, listener: Listener): UintStorage;
  once(event: EventFilter | string, listener: Listener): UintStorage;
  addListener(eventName: EventFilter | string, listener: Listener): UintStorage;
  removeAllListeners(eventName: EventFilter | string): UintStorage;
  removeListener(eventName: any, listener: Listener): UintStorage;

  interface: UintStorageInterface;

  functions: {
    getUint(_key: Arrayish): Promise<BigNumber>;
  };

  getUint(_key: Arrayish): Promise<BigNumber>;

  filters: {};

  estimate: {
    getUint(_key: Arrayish): Promise<BigNumber>;
  };
}
