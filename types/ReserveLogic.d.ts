/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ReserveLogicInterface extends Interface {
  functions: {};

  events: {
    ReserveDataUpdated: TypedEventDescription<{
      encodeTopics([
        reserve,
        liquidityRate,
        stableBorrowRate,
        averageStableBorrowRate,
        variableBorrowRate,
        liquidityIndex,
        variableBorrowIndex
      ]: [string | null, null, null, null, null, null, null]): string[];
    }>;
  };
}

export class ReserveLogic extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ReserveLogic;
  attach(addressOrName: string): ReserveLogic;
  deployed(): Promise<ReserveLogic>;

  on(event: EventFilter | string, listener: Listener): ReserveLogic;
  once(event: EventFilter | string, listener: Listener): ReserveLogic;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ReserveLogic;
  removeAllListeners(eventName: EventFilter | string): ReserveLogic;
  removeListener(eventName: any, listener: Listener): ReserveLogic;

  interface: ReserveLogicInterface;

  functions: {};

  filters: {
    ReserveDataUpdated(
      reserve: string | null,
      liquidityRate: null,
      stableBorrowRate: null,
      averageStableBorrowRate: null,
      variableBorrowRate: null,
      liquidityIndex: null,
      variableBorrowIndex: null
    ): EventFilter;
  };

  estimate: {};
}
