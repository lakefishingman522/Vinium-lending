/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Signer, BigNumberish} from 'ethers';
import {Provider, TransactionRequest} from '@ethersproject/providers';
import {Contract, ContractFactory, Overrides} from '@ethersproject/contracts';

import {DefaultReserveInterestRateStrategy} from './DefaultReserveInterestRateStrategy';

export class DefaultReserveInterestRateStrategyFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    provider: string,
    baseVariableBorrowRate: BigNumberish,
    variableRateSlope1: BigNumberish,
    variableRateSlope2: BigNumberish,
    stableRateSlope1: BigNumberish,
    stableRateSlope2: BigNumberish,
    overrides?: Overrides
  ): Promise<DefaultReserveInterestRateStrategy> {
    return super.deploy(
      provider,
      baseVariableBorrowRate,
      variableRateSlope1,
      variableRateSlope2,
      stableRateSlope1,
      stableRateSlope2,
      overrides || {}
    ) as Promise<DefaultReserveInterestRateStrategy>;
  }
  getDeployTransaction(
    provider: string,
    baseVariableBorrowRate: BigNumberish,
    variableRateSlope1: BigNumberish,
    variableRateSlope2: BigNumberish,
    stableRateSlope1: BigNumberish,
    stableRateSlope2: BigNumberish,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      provider,
      baseVariableBorrowRate,
      variableRateSlope1,
      variableRateSlope2,
      stableRateSlope1,
      stableRateSlope2,
      overrides || {}
    );
  }
  attach(address: string): DefaultReserveInterestRateStrategy {
    return super.attach(address) as DefaultReserveInterestRateStrategy;
  }
  connect(signer: Signer): DefaultReserveInterestRateStrategyFactory {
    return super.connect(signer) as DefaultReserveInterestRateStrategyFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DefaultReserveInterestRateStrategy {
    return new Contract(address, _abi, signerOrProvider) as DefaultReserveInterestRateStrategy;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract LendingPoolAddressesProvider',
        name: 'provider',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'baseVariableBorrowRate',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'variableRateSlope1',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'variableRateSlope2',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'stableRateSlope1',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'stableRateSlope2',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'EXCESS_UTILIZATION_RATE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'OPTIMAL_UTILIZATION_RATE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'addressesProvider',
    outputs: [
      {
        internalType: 'contract LendingPoolAddressesProvider',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'reserve',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'availableLiquidity',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'totalBorrowsStable',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'totalBorrowsVariable',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'averageStableBorrowRate',
        type: 'uint256',
      },
    ],
    name: 'calculateInterestRates',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getBaseVariableBorrowRate',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getStableRateSlope1',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getStableRateSlope2',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getVariableRateSlope1',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getVariableRateSlope2',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x61014060405234801561001157600080fd5b50604051610a8c380380610a8c833981810160405260c081101561003457600080fd5b5080516020820151604083015160608085015160808087015160a0978801516001600160601b03199790941b9690961690529290945260c05260e052610100526101205260805160601c60a05160c05160e051610100516101205161099b6100f16000398061018852806103a15250806103d252806104b952806105cc52508061041252806105f0525080610164528061046352806104fb5250806101bb5280610442528061054452508061023552806105a8525061099b6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806357e37af01161006657806357e37af0146100ca578063a15f30ac14610126578063c72c4d101461012e578063d5cd739114610152578063f42024091461015a57610093565b80630b3429a21461009857806314e32da4146100b257806317319873146100ba57806334762ca5146100c2575b600080fd5b6100a0610162565b60408051918252519081900360200190f35b6100a0610186565b6100a06101aa565b6100a06101b9565b610108600480360360a08110156100e057600080fd5b506001600160a01b0381351690602081013590604081013590606081013590608001356101dd565b60408051938452602084019290925282820152519081900360600190f35b6100a0610596565b6101366105a6565b604080516001600160a01b039092168252519081900360200190f35b6100a06105ca565b6100a06105ee565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6aa56fa5b99019a5c800000081565b7f000000000000000000000000000000000000000000000000000000000000000090565b60008080806101f2878763ffffffff61061216565b905060008080808415801561020557508b155b61022e5761022961021c8d8763ffffffff61061216565b869063ffffffff61067516565b610231565b60005b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633618abba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561028c57600080fd5b505afa1580156102a0573d6000803e3d6000fd5b505050506040513d60208110156102b657600080fd5b81019080805190602001909291905050506001600160a01b031663bb85c0bb8e6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561031c57600080fd5b505afa158015610330573d6000803e3d6000fd5b505050506040513d602081101561034657600080fd5b505192506b0295be96e6406697200000008111156104955760006103976aa56fa5b99019a5c800000061038b846b0295be96e64066972000000063ffffffff6106ac16565b9063ffffffff61067516565b90506104086103cc7f00000000000000000000000000000000000000000000000000000000000000008363ffffffff6106ee16565b6103fc867f000000000000000000000000000000000000000000000000000000000000000063ffffffff61061216565b9063ffffffff61061216565b935061048d61043d7f00000000000000000000000000000000000000000000000000000000000000008363ffffffff6106ee16565b6103fc7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000063ffffffff61061216565b945050610572565b6104f16104e46104b7836b0295be96e64066972000000063ffffffff61067516565b7f00000000000000000000000000000000000000000000000000000000000000009063ffffffff6106ee16565b849063ffffffff61061216565b925061056f6105427f0000000000000000000000000000000000000000000000000000000000000000610536846b0295be96e64066972000000063ffffffff61067516565b9063ffffffff6106ee16565b7f00000000000000000000000000000000000000000000000000000000000000009063ffffffff61061216565b93505b610582816105368d8d888e610726565b9d929c50929a509098505050505050505050565b6b0295be96e64066972000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60008282018381101561066c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000600282046106a4836106986104e4876b033b2e3c9fd0803ce8000000610797565b9063ffffffff6107f016565b949350505050565b600061066c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610832565b600061066c6b033b2e3c9fd0803ce8000000610698610713868663ffffffff61079716565b6b019d971e4fe8401e7400000090610612565b600080610739868663ffffffff61061216565b90508061074a5760009150506106a4565b600061075985610536886108c9565b9050600061076a856105368a6108c9565b9050600061078a61077a856108c9565b61038b858563ffffffff61061216565b9998505050505050505050565b6000826107a65750600061066f565b828202828482816107b357fe5b041461066c5760405162461bcd60e51b81526004018080602001828103825260218152602001806109456021913960400191505060405180910390fd5b600061066c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506108df565b600081848411156108c15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561088657818101518382015260200161086e565b50505050905090810190601f1680156108b35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600061066f82633b9aca0063ffffffff61079716565b6000818361092e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561088657818101518382015260200161086e565b50600083858161093a57fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212202a34f9054260bbd11d261cc236075f456fa23b57e1bdd22eca91aabc8916650364736f6c63430006080033';
