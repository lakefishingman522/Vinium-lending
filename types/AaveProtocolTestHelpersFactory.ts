/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from ".";
import { AaveProtocolTestHelpers } from "./AaveProtocolTestHelpers";

export class AaveProtocolTestHelpersFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    addressesProvider: string,
    overrides?: TransactionOverrides
  ): Promise<AaveProtocolTestHelpers> {
    return super.deploy(addressesProvider, overrides) as Promise<
      AaveProtocolTestHelpers
    >;
  }
  getDeployTransaction(
    addressesProvider: string,
    overrides?: TransactionOverrides
  ): UnsignedTransaction {
    return super.getDeployTransaction(addressesProvider, overrides);
  }
  attach(address: string): AaveProtocolTestHelpers {
    return super.attach(address) as AaveProtocolTestHelpers;
  }
  connect(signer: Signer): AaveProtocolTestHelpersFactory {
    return super.connect(signer) as AaveProtocolTestHelpersFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AaveProtocolTestHelpers {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AaveProtocolTestHelpers;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ILendingPoolAddressesProvider",
        name: "addressesProvider",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "ADDRESSES_PROVIDER",
    outputs: [
      {
        internalType: "contract ILendingPoolAddressesProvider",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getAllATokens",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "symbol",
            type: "string"
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address"
          }
        ],
        internalType: "struct AaveProtocolTestHelpers.TokenData[]",
        name: "",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getAllReservesTokens",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "symbol",
            type: "string"
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address"
          }
        ],
        internalType: "struct AaveProtocolTestHelpers.TokenData[]",
        name: "",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610a2a380380610a2a83398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c610993610097600039806083528060ab528061035f52506109936000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630542975c14610046578063b316ff8914610064578063f561ae4114610079575b600080fd5b61004e610081565b60405161005b9190610850565b60405180910390f35b61006c6100a5565b60405161005b9190610864565b61006c610359565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561010257600080fd5b505afa158015610116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013a919061065f565b90506060816001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160006040518083038186803b15801561017757600080fd5b505afa15801561018b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101b39190810190610681565b90506060815167ffffffffffffffff811180156101cf57600080fd5b5060405190808252806020026020018201604052801561020957816020015b6101f661061a565b8152602001906001900390816101ee5790505b50905060005b825181101561035157604051806040016040528084838151811061022f57fe5b60200260200101516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0316146102f05784838151811061026f57fe5b60200260200101516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156102af57600080fd5b505afa1580156102c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102eb919081019061072c565b61030d565b6040518060400160405280600381526020016208aa8960eb1b8152505b815260200184838151811061031e57fe5b60200260200101516001600160a01b031681525082828151811061033e57fe5b602090810291909101015260010161020f565b509250505090565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b657600080fd5b505afa1580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee919061065f565b90506060816001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160006040518083038186803b15801561042b57600080fd5b505afa15801561043f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104679190810190610681565b90506060815167ffffffffffffffff8111801561048357600080fd5b506040519080825280602002602001820160405280156104bd57816020015b6104aa61061a565b8152602001906001900390816104a25790505b50905060005b8251811015610351576000846001600160a01b0316633e1501418584815181106104e957fe5b60200260200101516040518263ffffffff1660e01b815260040161050d9190610850565b6101206040518083038186803b15801561052657600080fd5b505afa15801561053a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055e91906107b8565b505050505093505050506040518060400160405280826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156105ac57600080fd5b505afa1580156105c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105e8919081019061072c565b8152602001826001600160a01b031681525083838151811061060657fe5b6020908102919091010152506001016104c3565b60408051808201909152606081526000602082015290565b80516001600160a01b038116811461064957600080fd5b92915050565b8051801515811461064957600080fd5b600060208284031215610670578081fd5b61067a8383610632565b9392505050565b60006020808385031215610693578182fd5b825167ffffffffffffffff808211156106aa578384fd5b81850186601f8201126106bb578485fd5b80519250818311156106cb578485fd5b83830291506106db8483016108fd565b8381528481019082860184840187018a10156106f5578788fd5b8794505b8585101561071f5761070b8a82610632565b8352600194909401939186019186016106f9565b5098975050505050505050565b60006020828403121561073d578081fd5b815167ffffffffffffffff80821115610754578283fd5b81840185601f820112610765578384fd5b8051925081831115610775578384fd5b610788601f8401601f19166020016108fd565b915082825285602084830101111561079e578384fd5b6107af83602084016020840161092d565b50949350505050565b60008060008060008060008060006101208a8c0312156107d6578485fd5b8951985060208a0151975060408a015196506107f58b60608c01610632565b95506108048b60808c01610632565b94506108138b60a08c0161064f565b93506108228b60c08c0161064f565b92506108318b60e08c0161064f565b91506108418b6101008c0161064f565b90509295985092959850929598565b6001600160a01b0391909116815260200190565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156108ef57888303603f190185528151805187855280516108ae818a8801610924565b6108bb82828d860161092d565b928a01516001600160a01b0316958a01959095525094870194601f93909301601f1916929092019190860190600101610888565b509098975050505050505050565b60405181810167ffffffffffffffff8111828210171561091c57600080fd5b604052919050565b90815260200190565b60005b83811015610948578181015183820152602001610930565b83811115610957576000848401525b5050505056fea2646970667358221220c911debe8536c648d7e4b8c58a0de8adb5cb2d71c445a7b66fc4a4350b9fd0d064736f6c63430006080033";
