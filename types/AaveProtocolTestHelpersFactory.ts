/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from ".";
import { AaveProtocolTestHelpers } from "./AaveProtocolTestHelpers";

export class AaveProtocolTestHelpersFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    addressesProvider: string,
    overrides?: TransactionOverrides
  ): Promise<AaveProtocolTestHelpers> {
    return super.deploy(addressesProvider, overrides) as Promise<
      AaveProtocolTestHelpers
    >;
  }
  getDeployTransaction(
    addressesProvider: string,
    overrides?: TransactionOverrides
  ): UnsignedTransaction {
    return super.getDeployTransaction(addressesProvider, overrides);
  }
  attach(address: string): AaveProtocolTestHelpers {
    return super.attach(address) as AaveProtocolTestHelpers;
  }
  connect(signer: Signer): AaveProtocolTestHelpersFactory {
    return super.connect(signer) as AaveProtocolTestHelpersFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AaveProtocolTestHelpers {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AaveProtocolTestHelpers;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ILendingPoolAddressesProvider",
        name: "addressesProvider",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "ADDRESSES_PROVIDER",
    outputs: [
      {
        internalType: "contract ILendingPoolAddressesProvider",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getAllATokens",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "symbol",
            type: "string"
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address"
          }
        ],
        internalType: "struct AaveProtocolTestHelpers.TokenData[]",
        name: "",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getAllReservesTokens",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "symbol",
            type: "string"
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address"
          }
        ],
        internalType: "struct AaveProtocolTestHelpers.TokenData[]",
        name: "",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161092738038061092783398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c610890610097600039806083528060ab52806102fd52506108906000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630542975c14610046578063b316ff8914610064578063f561ae4114610079575b600080fd5b61004e610081565b60405161005b919061073f565b60405180910390f35b61006c6100a5565b60405161005b9190610753565b61006c6102f7565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ed6ff7606040518163ffffffff1660e01b815260040160206040518083038186803b15801561010257600080fd5b505afa158015610116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013a91906105d8565b90506060816001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160006040518083038186803b15801561017757600080fd5b505afa15801561018b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101b391908101906105fb565b90506060815167ffffffffffffffff811180156101cf57600080fd5b5060405190808252806020026020018201604052801561020957816020015b6101f66105af565b8152602001906001900390816101ee5790505b50905060005b82518110156102ef57604051806040016040528084838151811061022f57fe5b60200260200101516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561026f57600080fd5b505afa158015610283573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102ab91908101906106a6565b81526020018483815181106102bc57fe5b60200260200101516001600160a01b03168152508282815181106102dc57fe5b602090810291909101015260010161020f565b509250505090565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ed6ff7606040518163ffffffff1660e01b815260040160206040518083038186803b15801561035457600080fd5b505afa158015610368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c91906105d8565b90506060816001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160006040518083038186803b1580156103c957600080fd5b505afa1580156103dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261040591908101906105fb565b90506060815167ffffffffffffffff8111801561042157600080fd5b5060405190808252806020026020018201604052801561045b57816020015b6104486105af565b8152602001906001900390816104405790505b50905060005b82518110156102ef576000846001600160a01b03166334b3beee85848151811061048757fe5b60200260200101516040518263ffffffff1660e01b81526004016104ab919061073f565b60206040518083038186803b1580156104c357600080fd5b505afa1580156104d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fb91906105d8565b90506040518060400160405280826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561054157600080fd5b505afa158015610555573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261057d91908101906106a6565b8152602001826001600160a01b031681525083838151811061059b57fe5b602090810291909101015250600101610461565b60408051808201909152606081526000602082015290565b80516105d281610842565b92915050565b6000602082840312156105e9578081fd5b81516105f481610842565b9392505050565b6000602080838503121561060d578182fd5b825167ffffffffffffffff80821115610624578384fd5b81850186601f820112610635578485fd5b8051925081831115610645578485fd5b83830291506106558483016107eb565b8381528481019082860184840187018a101561066f578788fd5b8794505b85851015610699576106858a826105c7565b835260019490940193918601918601610673565b5098975050505050505050565b6000602082840312156106b7578081fd5b815167ffffffffffffffff808211156106ce578283fd5b81840185601f8201126106df578384fd5b80519250818311156106ef578384fd5b610702601f8401601f19166020016107eb565b9150828252856020848301011115610718578384fd5b610729836020840160208401610812565b50949350505050565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156107dd57603f19898403018552815180518785528051808987015260606107a7828289018d8601610812565b8a84015192506107b98b880184610732565b978a0197601f91909101601f19169590950190940193505090860190600101610777565b509098975050505050505050565b60405181810167ffffffffffffffff8111828210171561080a57600080fd5b604052919050565b60005b8381101561082d578181015183820152602001610815565b8381111561083c576000848401525b50505050565b6001600160a01b038116811461085757600080fd5b5056fea2646970667358221220967f9120944e2fb9b6967de3a3d8bdd8112cda206fef4ad213f58723df99cb4264736f6c63430006080033";
