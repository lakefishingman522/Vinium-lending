/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction} from 'ethers';
import {Contract, ContractTransaction, Overrides, CallOverrides} from '@ethersproject/contracts';
import {BytesLike} from '@ethersproject/bytes';
import {Listener, Provider} from '@ethersproject/providers';
import {FunctionFragment, EventFragment, Result} from '@ethersproject/abi';

interface MockATokenInterface extends ethers.utils.Interface {
  functions: {
    'ATOKEN_REVISION()': FunctionFragment;
    'UINT_MAX_VALUE()': FunctionFragment;
    'UNDERLYING_ASSET_ADDRESS()': FunctionFragment;
    'allowInterestRedirectionTo(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burn(address,address,uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'getInterestRedirectionAddress(address)': FunctionFragment;
    'getRedirectedBalance(address)': FunctionFragment;
    'getUserIndex(address)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(uint8,string,string)': FunctionFragment;
    'isTransferAllowed(address,uint256)': FunctionFragment;
    'mint(address,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'principalBalanceOf(address)': FunctionFragment;
    'redirectInterestStream(address)': FunctionFragment;
    'redirectInterestStreamOf(address,address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOnLiquidation(address,address,uint256)': FunctionFragment;
    'transferUnderlyingTo(address,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'ATOKEN_REVISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'UINT_MAX_VALUE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'UNDERLYING_ASSET_ADDRESS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowInterestRedirectionTo', values: [string]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'burn', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getInterestRedirectionAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'getRedirectedBalance', values: [string]): string;
  encodeFunctionData(functionFragment: 'getUserIndex', values: [string]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: 'isTransferAllowed', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'mint', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'principalBalanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'redirectInterestStream', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'redirectInterestStreamOf',
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOnLiquidation',
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferUnderlyingTo',
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'ATOKEN_REVISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'UINT_MAX_VALUE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'UNDERLYING_ASSET_ADDRESS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowInterestRedirectionTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInterestRedirectionAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedirectedBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTransferAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'principalBalanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redirectInterestStream', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redirectInterestStreamOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOnLiquidation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferUnderlyingTo', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'BalanceTransfer(address,address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'Burn(address,address,uint256,uint256,uint256)': EventFragment;
    'InterestRedirectionAllowanceChanged(address,address)': EventFragment;
    'InterestStreamRedirected(address,address,uint256,uint256,uint256)': EventFragment;
    'Mint(address,uint256,uint256,uint256)': EventFragment;
    'RedirectedBalanceUpdated(address,uint256,uint256,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BalanceTransfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InterestRedirectionAllowanceChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InterestStreamRedirected'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedirectedBalanceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export class MockAToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockATokenInterface;

  functions: {
    ATOKEN_REVISION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'ATOKEN_REVISION()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    UINT_MAX_VALUE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'UINT_MAX_VALUE()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    UNDERLYING_ASSET_ADDRESS(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'UNDERLYING_ASSET_ADDRESS()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    allowInterestRedirectionTo(to: string, overrides?: Overrides): Promise<ContractTransaction>;

    'allowInterestRedirectionTo(address)'(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'balanceOf(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    burn(
      user: string,
      underlyingTarget: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'burn(address,address,uint256)'(
      user: string,
      underlyingTarget: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    'decimals()'(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getInterestRedirectionAddress(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'getInterestRedirectionAddress(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRedirectedBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getRedirectedBalance(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getUserIndex(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getUserIndex(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _underlyingAssetDecimals: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'initialize(uint8,string,string)'(
      _underlyingAssetDecimals: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isTransferAllowed(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    'isTransferAllowed(address,uint256)'(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    mint(user: string, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    'mint(address,uint256)'(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'name()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    principalBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'principalBalanceOf(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    redirectInterestStream(to: string, overrides?: Overrides): Promise<ContractTransaction>;

    'redirectInterestStream(address)'(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redirectInterestStreamOf(
      from: string,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'redirectInterestStreamOf(address,address)'(
      from: string,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'symbol()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'totalSupply()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOnLiquidation(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'transferOnLiquidation(address,address,uint256)'(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferUnderlyingTo(
      target: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'transferUnderlyingTo(address,uint256)'(
      target: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  ATOKEN_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  'ATOKEN_REVISION()'(overrides?: CallOverrides): Promise<BigNumber>;

  UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  'UINT_MAX_VALUE()'(overrides?: CallOverrides): Promise<BigNumber>;

  UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<string>;

  'UNDERLYING_ASSET_ADDRESS()'(overrides?: CallOverrides): Promise<string>;

  allowInterestRedirectionTo(to: string, overrides?: Overrides): Promise<ContractTransaction>;

  'allowInterestRedirectionTo(address)'(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  'balanceOf(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    user: string,
    underlyingTarget: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'burn(address,address,uint256)'(
    user: string,
    underlyingTarget: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  'decimals()'(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getInterestRedirectionAddress(user: string, overrides?: CallOverrides): Promise<string>;

  'getInterestRedirectionAddress(address)'(
    user: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getRedirectedBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getRedirectedBalance(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getUserIndex(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getUserIndex(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _underlyingAssetDecimals: BigNumberish,
    _tokenName: string,
    _tokenSymbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'initialize(uint8,string,string)'(
    _underlyingAssetDecimals: BigNumberish,
    _tokenName: string,
    _tokenSymbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isTransferAllowed(
    user: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  'isTransferAllowed(address,uint256)'(
    user: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(user: string, amount: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  'mint(address,uint256)'(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  'name()'(overrides?: CallOverrides): Promise<string>;

  principalBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  'principalBalanceOf(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  redirectInterestStream(to: string, overrides?: Overrides): Promise<ContractTransaction>;

  'redirectInterestStream(address)'(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redirectInterestStreamOf(
    from: string,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'redirectInterestStreamOf(address,address)'(
    from: string,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  'symbol()'(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOnLiquidation(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'transferOnLiquidation(address,address,uint256)'(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferUnderlyingTo(
    target: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'transferUnderlyingTo(address,uint256)'(
    target: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    ATOKEN_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    'ATOKEN_REVISION()'(overrides?: CallOverrides): Promise<BigNumber>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    'UINT_MAX_VALUE()'(overrides?: CallOverrides): Promise<BigNumber>;

    UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<string>;

    'UNDERLYING_ASSET_ADDRESS()'(overrides?: CallOverrides): Promise<string>;

    allowInterestRedirectionTo(to: string, overrides?: CallOverrides): Promise<void>;

    'allowInterestRedirectionTo(address)'(to: string, overrides?: CallOverrides): Promise<void>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      user: string,
      underlyingTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'burn(address,address,uint256)'(
      user: string,
      underlyingTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    'decimals()'(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getInterestRedirectionAddress(user: string, overrides?: CallOverrides): Promise<string>;

    'getInterestRedirectionAddress(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getRedirectedBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getRedirectedBalance(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserIndex(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getUserIndex(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _underlyingAssetDecimals: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'initialize(uint8,string,string)'(
      _underlyingAssetDecimals: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isTransferAllowed(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'isTransferAllowed(address,uint256)'(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(user: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'mint(address,uint256)'(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    'name()'(overrides?: CallOverrides): Promise<string>;

    principalBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'principalBalanceOf(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    redirectInterestStream(to: string, overrides?: CallOverrides): Promise<void>;

    'redirectInterestStream(address)'(to: string, overrides?: CallOverrides): Promise<void>;

    redirectInterestStreamOf(from: string, to: string, overrides?: CallOverrides): Promise<void>;

    'redirectInterestStreamOf(address,address)'(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    'symbol()'(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOnLiquidation(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'transferOnLiquidation(address,address,uint256)'(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferUnderlyingTo(
      target: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'transferUnderlyingTo(address,uint256)'(
      target: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approval(owner: string | null, spender: string | null, value: null): EventFilter;

    BalanceTransfer(
      from: string | null,
      to: string | null,
      value: null,
      fromBalanceIncrease: null,
      toBalanceIncrease: null,
      fromIndex: null,
      toIndex: null
    ): EventFilter;

    Burn(
      from: string | null,
      target: string | null,
      value: null,
      fromBalanceIncrease: null,
      fromIndex: null
    ): EventFilter;

    InterestRedirectionAllowanceChanged(from: string | null, to: string | null): EventFilter;

    InterestStreamRedirected(
      from: string | null,
      to: string | null,
      redirectedBalance: null,
      fromBalanceIncrease: null,
      fromIndex: null
    ): EventFilter;

    Mint(from: string | null, value: null, fromBalanceIncrease: null, fromIndex: null): EventFilter;

    RedirectedBalanceUpdated(
      targetAddress: string | null,
      targetBalanceIncrease: null,
      targetIndex: null,
      redirectedBalanceAdded: null,
      redirectedBalanceRemoved: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    ATOKEN_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    'ATOKEN_REVISION()'(overrides?: CallOverrides): Promise<BigNumber>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    'UINT_MAX_VALUE()'(overrides?: CallOverrides): Promise<BigNumber>;

    UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    'UNDERLYING_ASSET_ADDRESS()'(overrides?: CallOverrides): Promise<BigNumber>;

    allowInterestRedirectionTo(to: string, overrides?: Overrides): Promise<BigNumber>;

    'allowInterestRedirectionTo(address)'(to: string, overrides?: Overrides): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      user: string,
      underlyingTarget: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'burn(address,address,uint256)'(
      user: string,
      underlyingTarget: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getInterestRedirectionAddress(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getInterestRedirectionAddress(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedirectedBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getRedirectedBalance(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserIndex(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getUserIndex(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _underlyingAssetDecimals: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'initialize(uint8,string,string)'(
      _underlyingAssetDecimals: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isTransferAllowed(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'isTransferAllowed(address,uint256)'(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(user: string, amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'mint(address,uint256)'(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    'name()'(overrides?: CallOverrides): Promise<BigNumber>;

    principalBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'principalBalanceOf(address)'(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    redirectInterestStream(to: string, overrides?: Overrides): Promise<BigNumber>;

    'redirectInterestStream(address)'(to: string, overrides?: Overrides): Promise<BigNumber>;

    redirectInterestStreamOf(from: string, to: string, overrides?: Overrides): Promise<BigNumber>;

    'redirectInterestStreamOf(address,address)'(
      from: string,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOnLiquidation(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'transferOnLiquidation(address,address,uint256)'(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferUnderlyingTo(
      target: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'transferUnderlyingTo(address,uint256)'(
      target: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ATOKEN_REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'ATOKEN_REVISION()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'UINT_MAX_VALUE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'UNDERLYING_ASSET_ADDRESS()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowInterestRedirectionTo(to: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'allowInterestRedirectionTo(address)'(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'balanceOf(address)'(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      user: string,
      underlyingTarget: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'burn(address,address,uint256)'(
      user: string,
      underlyingTarget: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getInterestRedirectionAddress(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getInterestRedirectionAddress(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedirectedBalance(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getRedirectedBalance(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserIndex(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getUserIndex(address)'(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _underlyingAssetDecimals: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'initialize(uint8,string,string)'(
      _underlyingAssetDecimals: BigNumberish,
      _tokenName: string,
      _tokenSymbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isTransferAllowed(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'isTransferAllowed(address,uint256)'(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(user: string, amount: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

    'mint(address,uint256)'(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    principalBalanceOf(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'principalBalanceOf(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redirectInterestStream(to: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'redirectInterestStream(address)'(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redirectInterestStreamOf(
      from: string,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'redirectInterestStreamOf(address,address)'(
      from: string,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOnLiquidation(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'transferOnLiquidation(address,address,uint256)'(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferUnderlyingTo(
      target: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'transferUnderlyingTo(address,uint256)'(
      target: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
