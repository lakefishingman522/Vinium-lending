/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Signer} from 'ethers';
import {Provider, TransactionRequest} from '@ethersproject/providers';
import {Contract, ContractFactory, Overrides} from '@ethersproject/contracts';

import {WalletBalanceProvider} from './WalletBalanceProvider';

export class WalletBalanceProviderFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(provider: string, overrides?: Overrides): Promise<WalletBalanceProvider> {
    return super.deploy(provider, overrides || {}) as Promise<WalletBalanceProvider>;
  }
  getDeployTransaction(provider: string, overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(provider, overrides || {});
  }
  attach(address: string): WalletBalanceProvider {
    return super.attach(address) as WalletBalanceProvider;
  }
  connect(signer: Signer): WalletBalanceProviderFactory {
    return super.connect(signer) as WalletBalanceProviderFactory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): WalletBalanceProvider {
    return new Contract(address, _abi, signerOrProvider) as WalletBalanceProvider;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract LendingPoolAddressesProvider',
        name: 'provider',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'token',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'users',
        type: 'address[]',
      },
      {
        internalType: 'address[]',
        name: 'tokens',
        type: 'address[]',
      },
    ],
    name: 'batchBalanceOf',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
    ],
    name: 'getUserWalletBalances',
    outputs: [
      {
        internalType: 'address[]',
        name: '',
        type: 'address[]',
      },
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    stateMutability: 'payable',
    type: 'receive',
  },
];

const _bytecode =
  '0x60a060405234801561001057600080fd5b506040516108833803806108838339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b031661081c610067600039806102fe525061081c6000f3fe6080604052600436106100385760003560e01c80639e3c930914610083578063b59b28ef1461014f578063f7888aec1461026e5761007e565b3661007e57610046336102bb565b61007c576040805162461bcd60e51b8152602060048201526002602482015261191960f11b604482015290519081900360640190fd5b005b600080fd5b34801561008f57600080fd5b506100b6600480360360208110156100a657600080fd5b50356001600160a01b03166102f7565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156100fa5781810151838201526020016100e2565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610139578181015183820152602001610121565b5050505090500194505050505060405180910390f35b34801561015b57600080fd5b5061021e6004803603604081101561017257600080fd5b81019060208101813564010000000081111561018d57600080fd5b82018360208201111561019f57600080fd5b803590602001918460208302840111640100000000831117156101c157600080fd5b9193909290916020810190356401000000008111156101df57600080fd5b8201836020820111156101f157600080fd5b8035906020019184602083028401116401000000008311171561021357600080fd5b5090925090506105f4565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561025a578181015183820152602001610242565b505050509050019250505060405180910390f35b34801561027a57600080fd5b506102a96004803603604081101561029157600080fd5b506001600160a01b038135811691602001351661073a565b60408051918252519081900360200190f35b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906102ef57508115155b949350505050565b60608060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561035557600080fd5b505afa158015610369573d6000803e3d6000fd5b505050506040513d602081101561037f57600080fd5b505160408051630240bc6b60e21b815290519192506060916001600160a01b03841691630902f1ac916004808301926000929190829003018186803b1580156103c757600080fd5b505afa1580156103db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561040457600080fd5b810190808051604051939291908464010000000082111561042457600080fd5b90830190602082018581111561043957600080fd5b825186602082028301116401000000008211171561045657600080fd5b82525081516020918201928201910280838360005b8381101561048357818101518382015260200161046b565b5050505090500160405250505090506060815167ffffffffffffffff811180156104ac57600080fd5b506040519080825280602002602001820160405280156104d6578160200160208202803683370190505b50905060005b82518110156105e8576000846001600160a01b0316633e15014185848151811061050257fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b031681526020019150506101406040518083038186803b15801561055157600080fd5b505afa158015610565573d6000803e3d6000fd5b505050506040513d61014081101561057c57600080fd5b5061010001519050806105a957600083838151811061059757fe5b602002602001018181525050506105e0565b6105c6888584815181106105b957fe5b602002602001015161073a565b8383815181106105d257fe5b602002602001018181525050505b6001016104dc565b50909350915050915091565b60608084830267ffffffffffffffff8111801561061057600080fd5b5060405190808252806020026020018201604052801561063a578160200160208202803683370190505b50905060005b858110156107305760005b848110156107275781850261068387878481811061066557fe5b905060200201356001600160a01b03166001600160a01b03166102bb565b6106c4576040805162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b604482015290519081900360640190fd5b6107048989858181106106d357fe5b905060200201356001600160a01b03168888858181106106ef57fe5b905060200201356001600160a01b031661073a565b848383018151811061071257fe5b6020026020010181815250505060010161064b565b50600101610640565b5095945050505050565b600061074e826001600160a01b03166102bb565b156107dc57816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b1580156107a957600080fd5b505afa1580156107bd573d6000803e3d6000fd5b505050506040513d60208110156107d357600080fd5b505190506107e0565b5060005b9291505056fea2646970667358221220aa96b19ed6c733f0654dca72b3cdbfc0313caf3bae33b5c49c2a75c9607f470e64736f6c63430006080033';
