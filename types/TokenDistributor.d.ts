/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenDistributorInterface extends ethers.utils.Interface {
  functions: {
    "DISTRIBUTION_BASE()": FunctionFragment;
    "IMPLEMENTATION_REVISION()": FunctionFragment;
    "KYBER_ETH_MOCK_ADDRESS()": FunctionFragment;
    "MAX_UINT()": FunctionFragment;
    "MAX_UINT_MINUS_ONE()": FunctionFragment;
    "MIN_CONVERSION_RATE()": FunctionFragment;
    "approveExchange(address[])": FunctionFragment;
    "distribute(address[])": FunctionFragment;
    "distributeWithAmounts(address[],uint256[])": FunctionFragment;
    "distributeWithPercentages(address[],uint256[])": FunctionFragment;
    "exchangeAdapter()": FunctionFragment;
    "getDistribution()": FunctionFragment;
    "initialize(address,address,address,address[],uint256[],address[])": FunctionFragment;
    "recipientBurn()": FunctionFragment;
    "tokenToBurn()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DISTRIBUTION_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IMPLEMENTATION_REVISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KYBER_ETH_MOCK_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_UINT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_UINT_MINUS_ONE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_CONVERSION_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveExchange",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeWithAmounts",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeWithPercentages",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToBurn",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DISTRIBUTION_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IMPLEMENTATION_REVISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KYBER_ETH_MOCK_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_UINT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_UINT_MINUS_ONE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_CONVERSION_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeWithAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeWithPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToBurn",
    data: BytesLike
  ): Result;

  events: {
    "Burn(uint256)": EventFragment;
    "Distributed(address,uint256,uint256)": EventFragment;
    "DistributionUpdated(address[],uint256[])": EventFragment;
    "Setup(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Distributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Setup"): EventFragment;
}

export class TokenDistributor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenDistributorInterface;

  functions: {
    DISTRIBUTION_BASE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "DISTRIBUTION_BASE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    IMPLEMENTATION_REVISION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "IMPLEMENTATION_REVISION()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    KYBER_ETH_MOCK_ADDRESS(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "KYBER_ETH_MOCK_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    MAX_UINT(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MAX_UINT()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_UINT_MINUS_ONE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MAX_UINT_MINUS_ONE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MIN_CONVERSION_RATE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MIN_CONVERSION_RATE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approveExchange(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveExchange(address[])"(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    distribute(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "distribute(address[])"(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    distributeWithAmounts(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "distributeWithAmounts(address[],uint256[])"(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    distributeWithPercentages(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "distributeWithPercentages(address[],uint256[])"(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exchangeAdapter(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "exchangeAdapter()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getDistribution(
      overrides?: CallOverrides
    ): Promise<{
      receivers: string[];
      percentages: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;

    "getDistribution()"(
      overrides?: CallOverrides
    ): Promise<{
      receivers: string[];
      percentages: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;

    initialize(
      _recipientBurn: string,
      _tokenToBurn: string,
      _exchangeAdapter: string,
      _receivers: string[],
      _percentages: BigNumberish[],
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address[],uint256[],address[])"(
      _recipientBurn: string,
      _tokenToBurn: string,
      _exchangeAdapter: string,
      _receivers: string[],
      _percentages: BigNumberish[],
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    recipientBurn(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "recipientBurn()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenToBurn(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenToBurn()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  DISTRIBUTION_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  "DISTRIBUTION_BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

  IMPLEMENTATION_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  "IMPLEMENTATION_REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

  KYBER_ETH_MOCK_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "KYBER_ETH_MOCK_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_UINT()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_UINT_MINUS_ONE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_UINT_MINUS_ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_CONVERSION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  "MIN_CONVERSION_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

  approveExchange(
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveExchange(address[])"(
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  distribute(
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "distribute(address[])"(
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  distributeWithAmounts(
    _tokens: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "distributeWithAmounts(address[],uint256[])"(
    _tokens: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  distributeWithPercentages(
    _tokens: string[],
    _percentages: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "distributeWithPercentages(address[],uint256[])"(
    _tokens: string[],
    _percentages: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exchangeAdapter(overrides?: CallOverrides): Promise<string>;

  "exchangeAdapter()"(overrides?: CallOverrides): Promise<string>;

  getDistribution(
    overrides?: CallOverrides
  ): Promise<{
    receivers: string[];
    percentages: BigNumber[];
    0: string[];
    1: BigNumber[];
  }>;

  "getDistribution()"(
    overrides?: CallOverrides
  ): Promise<{
    receivers: string[];
    percentages: BigNumber[];
    0: string[];
    1: BigNumber[];
  }>;

  initialize(
    _recipientBurn: string,
    _tokenToBurn: string,
    _exchangeAdapter: string,
    _receivers: string[],
    _percentages: BigNumberish[],
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address[],uint256[],address[])"(
    _recipientBurn: string,
    _tokenToBurn: string,
    _exchangeAdapter: string,
    _receivers: string[],
    _percentages: BigNumberish[],
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  recipientBurn(overrides?: CallOverrides): Promise<string>;

  "recipientBurn()"(overrides?: CallOverrides): Promise<string>;

  tokenToBurn(overrides?: CallOverrides): Promise<string>;

  "tokenToBurn()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DISTRIBUTION_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    "DISTRIBUTION_BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

    IMPLEMENTATION_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "IMPLEMENTATION_REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    KYBER_ETH_MOCK_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "KYBER_ETH_MOCK_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_UINT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT_MINUS_ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_UINT_MINUS_ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CONVERSION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_CONVERSION_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    approveExchange(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "approveExchange(address[])"(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    distribute(_tokens: string[], overrides?: CallOverrides): Promise<void>;

    "distribute(address[])"(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    distributeWithAmounts(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "distributeWithAmounts(address[],uint256[])"(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    distributeWithPercentages(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "distributeWithPercentages(address[],uint256[])"(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeAdapter(overrides?: CallOverrides): Promise<string>;

    "exchangeAdapter()"(overrides?: CallOverrides): Promise<string>;

    getDistribution(
      overrides?: CallOverrides
    ): Promise<{
      receivers: string[];
      percentages: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;

    "getDistribution()"(
      overrides?: CallOverrides
    ): Promise<{
      receivers: string[];
      percentages: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;

    initialize(
      _recipientBurn: string,
      _tokenToBurn: string,
      _exchangeAdapter: string,
      _receivers: string[],
      _percentages: BigNumberish[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address[],uint256[],address[])"(
      _recipientBurn: string,
      _tokenToBurn: string,
      _exchangeAdapter: string,
      _receivers: string[],
      _percentages: BigNumberish[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    recipientBurn(overrides?: CallOverrides): Promise<string>;

    "recipientBurn()"(overrides?: CallOverrides): Promise<string>;

    tokenToBurn(overrides?: CallOverrides): Promise<string>;

    "tokenToBurn()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Burn(amount: null): EventFilter;

    Distributed(receiver: null, percentage: null, amount: null): EventFilter;

    DistributionUpdated(receivers: null, percentages: null): EventFilter;

    Setup(
      tokenToBurn: null,
      exchangeAdapter: null,
      _recipientBurn: null
    ): EventFilter;
  };

  estimateGas: {
    DISTRIBUTION_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    "DISTRIBUTION_BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

    IMPLEMENTATION_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "IMPLEMENTATION_REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    KYBER_ETH_MOCK_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "KYBER_ETH_MOCK_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_UINT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT_MINUS_ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_UINT_MINUS_ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CONVERSION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_CONVERSION_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    approveExchange(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveExchange(address[])"(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    distribute(_tokens: string[], overrides?: Overrides): Promise<BigNumber>;

    "distribute(address[])"(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    distributeWithAmounts(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "distributeWithAmounts(address[],uint256[])"(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    distributeWithPercentages(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "distributeWithPercentages(address[],uint256[])"(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    exchangeAdapter(overrides?: CallOverrides): Promise<BigNumber>;

    "exchangeAdapter()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    "getDistribution()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _recipientBurn: string,
      _tokenToBurn: string,
      _exchangeAdapter: string,
      _receivers: string[],
      _percentages: BigNumberish[],
      _tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address[],uint256[],address[])"(
      _recipientBurn: string,
      _tokenToBurn: string,
      _exchangeAdapter: string,
      _receivers: string[],
      _percentages: BigNumberish[],
      _tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    recipientBurn(overrides?: CallOverrides): Promise<BigNumber>;

    "recipientBurn()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToBurn(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenToBurn()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DISTRIBUTION_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DISTRIBUTION_BASE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IMPLEMENTATION_REVISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "IMPLEMENTATION_REVISION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KYBER_ETH_MOCK_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "KYBER_ETH_MOCK_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_UINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_UINT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_UINT_MINUS_ONE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_UINT_MINUS_ONE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_CONVERSION_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MIN_CONVERSION_RATE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveExchange(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveExchange(address[])"(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    distribute(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "distribute(address[])"(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    distributeWithAmounts(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "distributeWithAmounts(address[],uint256[])"(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    distributeWithPercentages(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "distributeWithPercentages(address[],uint256[])"(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exchangeAdapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exchangeAdapter()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDistribution()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _recipientBurn: string,
      _tokenToBurn: string,
      _exchangeAdapter: string,
      _receivers: string[],
      _percentages: BigNumberish[],
      _tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address[],uint256[],address[])"(
      _recipientBurn: string,
      _tokenToBurn: string,
      _exchangeAdapter: string,
      _receivers: string[],
      _percentages: BigNumberish[],
      _tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    recipientBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "recipientBurn()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenToBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenToBurn()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
