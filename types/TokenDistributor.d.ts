/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from 'ethers';
import {Listener, Provider} from 'ethers/providers';
import {Arrayish, BigNumber, BigNumberish, Interface} from 'ethers/utils';
import {TransactionOverrides, TypedEventDescription, TypedFunctionDescription} from '.';

interface TokenDistributorInterface extends Interface {
  functions: {
    DISTRIBUTION_BASE: TypedFunctionDescription<{encode([]: []): string}>;

    IMPLEMENTATION_REVISION: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    KYBER_ETH_MOCK_ADDRESS: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    MAX_UINT: TypedFunctionDescription<{encode([]: []): string}>;

    MAX_UINT_MINUS_ONE: TypedFunctionDescription<{encode([]: []): string}>;

    MIN_CONVERSION_RATE: TypedFunctionDescription<{encode([]: []): string}>;

    approveExchange: TypedFunctionDescription<{
      encode([_tokens]: [string[]]): string;
    }>;

    distribute: TypedFunctionDescription<{
      encode([_tokens]: [string[]]): string;
    }>;

    distributeWithAmounts: TypedFunctionDescription<{
      encode([_tokens, _amounts]: [string[], BigNumberish[]]): string;
    }>;

    distributeWithPercentages: TypedFunctionDescription<{
      encode([_tokens, _percentages]: [string[], BigNumberish[]]): string;
    }>;

    exchangeAdapter: TypedFunctionDescription<{encode([]: []): string}>;

    getDistribution: TypedFunctionDescription<{encode([]: []): string}>;

    initialize: TypedFunctionDescription<{
      encode([_recipientBurn, _tokenToBurn, _exchangeAdapter, _receivers, _percentages, _tokens]: [
        string,
        string,
        string,
        string[],
        BigNumberish[],
        string[]
      ]): string;
    }>;

    recipientBurn: TypedFunctionDescription<{encode([]: []): string}>;

    tokenToBurn: TypedFunctionDescription<{encode([]: []): string}>;
  };

  events: {
    Burn: TypedEventDescription<{encodeTopics([amount]: [null]): string[]}>;

    Distributed: TypedEventDescription<{
      encodeTopics([receiver, percentage, amount]: [null, null, null]): string[];
    }>;

    DistributionUpdated: TypedEventDescription<{
      encodeTopics([receivers, percentages]: [null, null]): string[];
    }>;

    Setup: TypedEventDescription<{
      encodeTopics([tokenToBurn, exchangeAdapter, _recipientBurn]: [null, null, null]): string[];
    }>;
  };
}

export class TokenDistributor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): TokenDistributor;
  attach(addressOrName: string): TokenDistributor;
  deployed(): Promise<TokenDistributor>;

  on(event: EventFilter | string, listener: Listener): TokenDistributor;
  once(event: EventFilter | string, listener: Listener): TokenDistributor;
  addListener(eventName: EventFilter | string, listener: Listener): TokenDistributor;
  removeAllListeners(eventName: EventFilter | string): TokenDistributor;
  removeListener(eventName: any, listener: Listener): TokenDistributor;

  interface: TokenDistributorInterface;

  functions: {
    DISTRIBUTION_BASE(): Promise<BigNumber>;

    IMPLEMENTATION_REVISION(): Promise<BigNumber>;

    KYBER_ETH_MOCK_ADDRESS(): Promise<string>;

    MAX_UINT(): Promise<BigNumber>;

    MAX_UINT_MINUS_ONE(): Promise<BigNumber>;

    MIN_CONVERSION_RATE(): Promise<BigNumber>;

    approveExchange(
      _tokens: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    distribute(_tokens: string[], overrides?: TransactionOverrides): Promise<ContractTransaction>;

    distributeWithAmounts(
      _tokens: string[],
      _amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    distributeWithPercentages(
      _tokens: string[],
      _percentages: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    exchangeAdapter(): Promise<string>;

    getDistribution(): Promise<{
      receivers: string[];
      percentages: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;

    initialize(
      _recipientBurn: string,
      _tokenToBurn: string,
      _exchangeAdapter: string,
      _receivers: string[],
      _percentages: BigNumberish[],
      _tokens: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    recipientBurn(): Promise<string>;

    tokenToBurn(): Promise<string>;
  };

  DISTRIBUTION_BASE(): Promise<BigNumber>;

  IMPLEMENTATION_REVISION(): Promise<BigNumber>;

  KYBER_ETH_MOCK_ADDRESS(): Promise<string>;

  MAX_UINT(): Promise<BigNumber>;

  MAX_UINT_MINUS_ONE(): Promise<BigNumber>;

  MIN_CONVERSION_RATE(): Promise<BigNumber>;

  approveExchange(
    _tokens: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  distribute(_tokens: string[], overrides?: TransactionOverrides): Promise<ContractTransaction>;

  distributeWithAmounts(
    _tokens: string[],
    _amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  distributeWithPercentages(
    _tokens: string[],
    _percentages: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  exchangeAdapter(): Promise<string>;

  getDistribution(): Promise<{
    receivers: string[];
    percentages: BigNumber[];
    0: string[];
    1: BigNumber[];
  }>;

  initialize(
    _recipientBurn: string,
    _tokenToBurn: string,
    _exchangeAdapter: string,
    _receivers: string[],
    _percentages: BigNumberish[],
    _tokens: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  recipientBurn(): Promise<string>;

  tokenToBurn(): Promise<string>;

  filters: {
    Burn(amount: null): EventFilter;

    Distributed(receiver: null, percentage: null, amount: null): EventFilter;

    DistributionUpdated(receivers: null, percentages: null): EventFilter;

    Setup(tokenToBurn: null, exchangeAdapter: null, _recipientBurn: null): EventFilter;
  };

  estimate: {
    DISTRIBUTION_BASE(): Promise<BigNumber>;

    IMPLEMENTATION_REVISION(): Promise<BigNumber>;

    KYBER_ETH_MOCK_ADDRESS(): Promise<BigNumber>;

    MAX_UINT(): Promise<BigNumber>;

    MAX_UINT_MINUS_ONE(): Promise<BigNumber>;

    MIN_CONVERSION_RATE(): Promise<BigNumber>;

    approveExchange(_tokens: string[]): Promise<BigNumber>;

    distribute(_tokens: string[]): Promise<BigNumber>;

    distributeWithAmounts(_tokens: string[], _amounts: BigNumberish[]): Promise<BigNumber>;

    distributeWithPercentages(_tokens: string[], _percentages: BigNumberish[]): Promise<BigNumber>;

    exchangeAdapter(): Promise<BigNumber>;

    getDistribution(): Promise<BigNumber>;

    initialize(
      _recipientBurn: string,
      _tokenToBurn: string,
      _exchangeAdapter: string,
      _receivers: string[],
      _percentages: BigNumberish[],
      _tokens: string[]
    ): Promise<BigNumber>;

    recipientBurn(): Promise<BigNumber>;

    tokenToBurn(): Promise<BigNumber>;
  };
}
