/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface GenericOracleIInterface extends Interface {
  functions: {
    getAssetPrice: TypedFunctionDescription<{
      encode([_asset]: [string]): string;
    }>;

    getEthUsdPrice: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    AssetPriceUpdated: TypedEventDescription<{
      encodeTopics([_asset, _price, timestamp]: [null, null, null]): string[];
    }>;

    EthPriceUpdated: TypedEventDescription<{
      encodeTopics([_price, timestamp]: [null, null]): string[];
    }>;

    ProphecySubmitted: TypedEventDescription<{
      encodeTopics([_sybil, _asset, _sybilProphecy, _oracleProphecy]: [
        string | null,
        string | null,
        null,
        null
      ]): string[];
    }>;
  };
}

export class GenericOracleI extends Contract {
  connect(signerOrProvider: Signer | Provider | string): GenericOracleI;
  attach(addressOrName: string): GenericOracleI;
  deployed(): Promise<GenericOracleI>;

  on(event: EventFilter | string, listener: Listener): GenericOracleI;
  once(event: EventFilter | string, listener: Listener): GenericOracleI;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): GenericOracleI;
  removeAllListeners(eventName: EventFilter | string): GenericOracleI;
  removeListener(eventName: any, listener: Listener): GenericOracleI;

  interface: GenericOracleIInterface;

  functions: {
    getAssetPrice(_asset: string): Promise<BigNumber>;

    getEthUsdPrice(): Promise<BigNumber>;
  };

  getAssetPrice(_asset: string): Promise<BigNumber>;

  getEthUsdPrice(): Promise<BigNumber>;

  filters: {
    AssetPriceUpdated(_asset: null, _price: null, timestamp: null): EventFilter;

    EthPriceUpdated(_price: null, timestamp: null): EventFilter;

    ProphecySubmitted(
      _sybil: string | null,
      _asset: string | null,
      _sybilProphecy: null,
      _oracleProphecy: null
    ): EventFilter;
  };

  estimate: {
    getAssetPrice(_asset: string): Promise<BigNumber>;

    getEthUsdPrice(): Promise<BigNumber>;
  };
}
