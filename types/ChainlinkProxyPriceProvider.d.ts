/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ChainlinkProxyPriceProviderInterface extends Interface {
  functions: {
    getAssetPrice: TypedFunctionDescription<{
      encode([_asset]: [string]): string;
    }>;

    getAssetsPrices: TypedFunctionDescription<{
      encode([_assets]: [string[]]): string;
    }>;

    getFallbackOracle: TypedFunctionDescription<{ encode([]: []): string }>;

    getSourceOfAsset: TypedFunctionDescription<{
      encode([_asset]: [string]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    setAssetSources: TypedFunctionDescription<{
      encode([_assets, _sources]: [string[], string[]]): string;
    }>;

    setFallbackOracle: TypedFunctionDescription<{
      encode([_fallbackOracle]: [string]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;
  };

  events: {
    AssetSourceUpdated: TypedEventDescription<{
      encodeTopics([asset, source]: [string | null, string | null]): string[];
    }>;

    FallbackOracleUpdated: TypedEventDescription<{
      encodeTopics([fallbackOracle]: [string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class ChainlinkProxyPriceProvider extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): ChainlinkProxyPriceProvider;
  attach(addressOrName: string): ChainlinkProxyPriceProvider;
  deployed(): Promise<ChainlinkProxyPriceProvider>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): ChainlinkProxyPriceProvider;
  once(
    event: EventFilter | string,
    listener: Listener
  ): ChainlinkProxyPriceProvider;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ChainlinkProxyPriceProvider;
  removeAllListeners(
    eventName: EventFilter | string
  ): ChainlinkProxyPriceProvider;
  removeListener(
    eventName: any,
    listener: Listener
  ): ChainlinkProxyPriceProvider;

  interface: ChainlinkProxyPriceProviderInterface;

  functions: {
    getAssetPrice(_asset: string): Promise<BigNumber>;

    getAssetsPrices(_assets: string[]): Promise<BigNumber[]>;

    getFallbackOracle(): Promise<string>;

    getSourceOfAsset(_asset: string): Promise<string>;

    owner(): Promise<string>;

    renounceOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAssetSources(
      _assets: string[],
      _sources: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setFallbackOracle(
      _fallbackOracle: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getAssetPrice(_asset: string): Promise<BigNumber>;

  getAssetsPrices(_assets: string[]): Promise<BigNumber[]>;

  getFallbackOracle(): Promise<string>;

  getSourceOfAsset(_asset: string): Promise<string>;

  owner(): Promise<string>;

  renounceOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAssetSources(
    _assets: string[],
    _sources: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setFallbackOracle(
    _fallbackOracle: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AssetSourceUpdated(
      asset: string | null,
      source: string | null
    ): EventFilter;

    FallbackOracleUpdated(fallbackOracle: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    getAssetPrice(_asset: string): Promise<BigNumber>;

    getAssetsPrices(_assets: string[]): Promise<BigNumber>;

    getFallbackOracle(): Promise<BigNumber>;

    getSourceOfAsset(_asset: string): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    renounceOwnership(): Promise<BigNumber>;

    setAssetSources(_assets: string[], _sources: string[]): Promise<BigNumber>;

    setFallbackOracle(_fallbackOracle: string): Promise<BigNumber>;

    transferOwnership(newOwner: string): Promise<BigNumber>;
  };
}
