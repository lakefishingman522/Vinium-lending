/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction} from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts';
import {BytesLike} from '@ethersproject/bytes';
import {Listener, Provider} from '@ethersproject/providers';
import {FunctionFragment, EventFragment, Result} from '@ethersproject/abi';

interface LendingPoolInterface extends ethers.utils.Interface {
  functions: {
    'LENDINGPOOL_REVISION()': FunctionFragment;
    'UINT_MAX_VALUE()': FunctionFragment;
    'addressesProvider()': FunctionFragment;
    'balanceDecreaseAllowed(address,address,uint256)': FunctionFragment;
    'borrow(address,uint256,uint256,uint16)': FunctionFragment;
    'deposit(address,uint256,uint16)': FunctionFragment;
    'flashLoan(address,address,uint256,bytes)': FunctionFragment;
    'getConfiguration(address)': FunctionFragment;
    'getReserveConfigurationData(address)': FunctionFragment;
    'getReserveData(address)': FunctionFragment;
    'getReserveNormalizedIncome(address)': FunctionFragment;
    'getReserveNormalizedVariableDebt(address)': FunctionFragment;
    'getReserveTokensAddresses(address)': FunctionFragment;
    'getReserves()': FunctionFragment;
    'getUserAccountData(address)': FunctionFragment;
    'getUserReserveData(address,address)': FunctionFragment;
    'initReserve(address,address,address,address,address)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'liquidationCall(address,address,address,uint256,bool)': FunctionFragment;
    'rebalanceStableBorrowRate(address,address)': FunctionFragment;
    'repay(address,uint256,uint256,address)': FunctionFragment;
    'reservesList(uint256)': FunctionFragment;
    'setConfiguration(address,uint256)': FunctionFragment;
    'setReserveInterestRateStrategyAddress(address,address)': FunctionFragment;
    'setUserUseReserveAsCollateral(address,bool)': FunctionFragment;
    'swapBorrowRateMode(address,uint256)': FunctionFragment;
    'withdraw(address,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'LENDINGPOOL_REVISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'UINT_MAX_VALUE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addressesProvider', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'balanceDecreaseAllowed',
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'borrow',
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'flashLoan',
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'getConfiguration', values: [string]): string;
  encodeFunctionData(functionFragment: 'getReserveConfigurationData', values: [string]): string;
  encodeFunctionData(functionFragment: 'getReserveData', values: [string]): string;
  encodeFunctionData(functionFragment: 'getReserveNormalizedIncome', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'getReserveNormalizedVariableDebt',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'getReserveTokensAddresses', values: [string]): string;
  encodeFunctionData(functionFragment: 'getReserves', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUserAccountData', values: [string]): string;
  encodeFunctionData(functionFragment: 'getUserReserveData', values: [string, string]): string;
  encodeFunctionData(
    functionFragment: 'initReserve',
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'liquidationCall',
    values: [string, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'rebalanceStableBorrowRate',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'repay',
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'reservesList', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setConfiguration', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'setReserveInterestRateStrategyAddress',
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'setUserUseReserveAsCollateral',
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapBorrowRateMode',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'LENDINGPOOL_REVISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'UINT_MAX_VALUE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addressesProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceDecreaseAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'flashLoan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getConfiguration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserveConfigurationData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserveData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserveNormalizedIncome', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getReserveNormalizedVariableDebt',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getReserveTokensAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserAccountData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserReserveData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initReserve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidationCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebalanceStableBorrowRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reservesList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setConfiguration', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setReserveInterestRateStrategyAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setUserUseReserveAsCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapBorrowRateMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Borrow(address,address,uint256,uint256,uint256,uint16,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint16,uint256)': EventFragment;
    'FlashLoan(address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'LiquidationCall(address,address,address,uint256,uint256,uint256,address,bool,uint256)': EventFragment;
    'OriginationFeeLiquidated(address,address,address,uint256,uint256,uint256)': EventFragment;
    'RebalanceStableBorrowRate(address,address,uint256)': EventFragment;
    'Repay(address,address,address,uint256,uint256)': EventFragment;
    'ReserveUsedAsCollateralDisabled(address,address)': EventFragment;
    'ReserveUsedAsCollateralEnabled(address,address)': EventFragment;
    'Swap(address,address,uint256)': EventFragment;
    'Withdraw(address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Borrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FlashLoan'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidationCall'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OriginationFeeLiquidated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RebalanceStableBorrowRate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Repay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReserveUsedAsCollateralDisabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReserveUsedAsCollateralEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export class LendingPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LendingPoolInterface;

  functions: {
    LENDINGPOOL_REVISION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'LENDINGPOOL_REVISION()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    UINT_MAX_VALUE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'UINT_MAX_VALUE()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    addressesProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'addressesProvider()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    balanceDecreaseAllowed(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    'balanceDecreaseAllowed(address,address,uint256)'(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'borrow(address,uint256,uint256,uint16)'(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    'deposit(address,uint256,uint16)'(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    flashLoan(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'flashLoan(address,address,uint256,bytes)'(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getConfiguration(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {data: BigNumber; 0: BigNumber};
    }>;

    'getConfiguration(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {data: BigNumber; 0: BigNumber};
    }>;

    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      decimals: BigNumber;
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      interestRateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      isActive: boolean;
      isFreezed: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: boolean;
      6: boolean;
      7: boolean;
      8: boolean;
      9: boolean;
    }>;

    'getReserveConfigurationData(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      decimals: BigNumber;
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      interestRateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      isActive: boolean;
      isFreezed: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: boolean;
      6: boolean;
      7: boolean;
      8: boolean;
      9: boolean;
    }>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      availableLiquidity: BigNumber;
      totalBorrowsStable: BigNumber;
      totalBorrowsVariable: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowRate: BigNumber;
      stableBorrowRate: BigNumber;
      averageStableBorrowRate: BigNumber;
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: number;
    }>;

    'getReserveData(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      availableLiquidity: BigNumber;
      totalBorrowsStable: BigNumber;
      totalBorrowsVariable: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowRate: BigNumber;
      stableBorrowRate: BigNumber;
      averageStableBorrowRate: BigNumber;
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: number;
    }>;

    getReserveNormalizedIncome(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getReserveNormalizedIncome(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getReserveNormalizedVariableDebt(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    'getReserveNormalizedVariableDebt(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getReserveTokensAddresses(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      aTokenAddress: string;
      stableDebtTokenAddress: string;
      variableDebtTokenAddress: string;
      0: string;
      1: string;
      2: string;
    }>;

    'getReserveTokensAddresses(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      aTokenAddress: string;
      stableDebtTokenAddress: string;
      variableDebtTokenAddress: string;
      0: string;
      1: string;
      2: string;
    }>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    'getReserves()'(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    getUserAccountData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      totalCollateralETH: BigNumber;
      totalBorrowsETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    'getUserAccountData(address)'(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      totalCollateralETH: BigNumber;
      totalBorrowsETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      currentATokenBalance: BigNumber;
      currentStableDebt: BigNumber;
      currentVariableDebt: BigNumber;
      principalStableDebt: BigNumber;
      principalVariableDebt: BigNumber;
      stableBorrowRate: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowIndex: BigNumber;
      stableRateLastUpdated: number;
      usageAsCollateralEnabled: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: number;
      9: boolean;
    }>;

    'getUserReserveData(address,address)'(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      currentATokenBalance: BigNumber;
      currentStableDebt: BigNumber;
      currentVariableDebt: BigNumber;
      principalStableDebt: BigNumber;
      principalVariableDebt: BigNumber;
      stableBorrowRate: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowIndex: BigNumber;
      stableRateLastUpdated: number;
      usageAsCollateralEnabled: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: number;
      9: boolean;
    }>;

    initReserve(
      _reserve: string,
      _aTokenAddress: string,
      _stableDebtAddress: string,
      _variableDebtAddress: string,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'initReserve(address,address,address,address,address)'(
      _reserve: string,
      _aTokenAddress: string,
      _stableDebtAddress: string,
      _variableDebtAddress: string,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(_addressesProvider: string, overrides?: Overrides): Promise<ContractTransaction>;

    'initialize(address)'(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    'liquidationCall(address,address,address,uint256,bool)'(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    rebalanceStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'rebalanceStableBorrowRate(address,address)'(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _rateMode: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    'repay(address,uint256,uint256,address)'(
      _reserve: string,
      _amount: BigNumberish,
      _rateMode: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    reservesList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    'reservesList(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setConfiguration(
      _reserve: string,
      _configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'setConfiguration(address,uint256)'(
      _reserve: string,
      _configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'setReserveInterestRateStrategyAddress(address,address)'(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'setUserUseReserveAsCollateral(address,bool)'(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapBorrowRateMode(
      _reserve: string,
      _rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'swapBorrowRateMode(address,uint256)'(
      _reserve: string,
      _rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    'withdraw(address,uint256)'(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  'LENDINGPOOL_REVISION()'(overrides?: CallOverrides): Promise<BigNumber>;

  UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  'UINT_MAX_VALUE()'(overrides?: CallOverrides): Promise<BigNumber>;

  addressesProvider(overrides?: CallOverrides): Promise<string>;

  'addressesProvider()'(overrides?: CallOverrides): Promise<string>;

  balanceDecreaseAllowed(
    _reserve: string,
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  'balanceDecreaseAllowed(address,address,uint256)'(
    _reserve: string,
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  borrow(
    _reserve: string,
    _amount: BigNumberish,
    _interestRateMode: BigNumberish,
    _referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'borrow(address,uint256,uint256,uint16)'(
    _reserve: string,
    _amount: BigNumberish,
    _interestRateMode: BigNumberish,
    _referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _reserve: string,
    _amount: BigNumberish,
    _referralCode: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  'deposit(address,uint256,uint16)'(
    _reserve: string,
    _amount: BigNumberish,
    _referralCode: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  flashLoan(
    _receiver: string,
    _reserve: string,
    _amount: BigNumberish,
    _params: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'flashLoan(address,address,uint256,bytes)'(
    _receiver: string,
    _reserve: string,
    _amount: BigNumberish,
    _params: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getConfiguration(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{data: BigNumber; 0: BigNumber}>;

  'getConfiguration(address)'(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{data: BigNumber; 0: BigNumber}>;

  getReserveConfigurationData(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{
    decimals: BigNumber;
    ltv: BigNumber;
    liquidationThreshold: BigNumber;
    liquidationBonus: BigNumber;
    interestRateStrategyAddress: string;
    usageAsCollateralEnabled: boolean;
    borrowingEnabled: boolean;
    stableBorrowRateEnabled: boolean;
    isActive: boolean;
    isFreezed: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: string;
    5: boolean;
    6: boolean;
    7: boolean;
    8: boolean;
    9: boolean;
  }>;

  'getReserveConfigurationData(address)'(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{
    decimals: BigNumber;
    ltv: BigNumber;
    liquidationThreshold: BigNumber;
    liquidationBonus: BigNumber;
    interestRateStrategyAddress: string;
    usageAsCollateralEnabled: boolean;
    borrowingEnabled: boolean;
    stableBorrowRateEnabled: boolean;
    isActive: boolean;
    isFreezed: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: string;
    5: boolean;
    6: boolean;
    7: boolean;
    8: boolean;
    9: boolean;
  }>;

  getReserveData(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{
    availableLiquidity: BigNumber;
    totalBorrowsStable: BigNumber;
    totalBorrowsVariable: BigNumber;
    liquidityRate: BigNumber;
    variableBorrowRate: BigNumber;
    stableBorrowRate: BigNumber;
    averageStableBorrowRate: BigNumber;
    liquidityIndex: BigNumber;
    variableBorrowIndex: BigNumber;
    lastUpdateTimestamp: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: number;
  }>;

  'getReserveData(address)'(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{
    availableLiquidity: BigNumber;
    totalBorrowsStable: BigNumber;
    totalBorrowsVariable: BigNumber;
    liquidityRate: BigNumber;
    variableBorrowRate: BigNumber;
    stableBorrowRate: BigNumber;
    averageStableBorrowRate: BigNumber;
    liquidityIndex: BigNumber;
    variableBorrowIndex: BigNumber;
    lastUpdateTimestamp: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: number;
  }>;

  getReserveNormalizedIncome(_reserve: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getReserveNormalizedIncome(address)'(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveNormalizedVariableDebt(_reserve: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getReserveNormalizedVariableDebt(address)'(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveTokensAddresses(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{
    aTokenAddress: string;
    stableDebtTokenAddress: string;
    variableDebtTokenAddress: string;
    0: string;
    1: string;
    2: string;
  }>;

  'getReserveTokensAddresses(address)'(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{
    aTokenAddress: string;
    stableDebtTokenAddress: string;
    variableDebtTokenAddress: string;
    0: string;
    1: string;
    2: string;
  }>;

  getReserves(overrides?: CallOverrides): Promise<string[]>;

  'getReserves()'(overrides?: CallOverrides): Promise<string[]>;

  getUserAccountData(
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    totalCollateralETH: BigNumber;
    totalBorrowsETH: BigNumber;
    availableBorrowsETH: BigNumber;
    currentLiquidationThreshold: BigNumber;
    ltv: BigNumber;
    healthFactor: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  'getUserAccountData(address)'(
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    totalCollateralETH: BigNumber;
    totalBorrowsETH: BigNumber;
    availableBorrowsETH: BigNumber;
    currentLiquidationThreshold: BigNumber;
    ltv: BigNumber;
    healthFactor: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  getUserReserveData(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    currentATokenBalance: BigNumber;
    currentStableDebt: BigNumber;
    currentVariableDebt: BigNumber;
    principalStableDebt: BigNumber;
    principalVariableDebt: BigNumber;
    stableBorrowRate: BigNumber;
    liquidityRate: BigNumber;
    variableBorrowIndex: BigNumber;
    stableRateLastUpdated: number;
    usageAsCollateralEnabled: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: number;
    9: boolean;
  }>;

  'getUserReserveData(address,address)'(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    currentATokenBalance: BigNumber;
    currentStableDebt: BigNumber;
    currentVariableDebt: BigNumber;
    principalStableDebt: BigNumber;
    principalVariableDebt: BigNumber;
    stableBorrowRate: BigNumber;
    liquidityRate: BigNumber;
    variableBorrowIndex: BigNumber;
    stableRateLastUpdated: number;
    usageAsCollateralEnabled: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: number;
    9: boolean;
  }>;

  initReserve(
    _reserve: string,
    _aTokenAddress: string,
    _stableDebtAddress: string,
    _variableDebtAddress: string,
    _interestRateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'initReserve(address,address,address,address,address)'(
    _reserve: string,
    _aTokenAddress: string,
    _stableDebtAddress: string,
    _variableDebtAddress: string,
    _interestRateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(_addressesProvider: string, overrides?: Overrides): Promise<ContractTransaction>;

  'initialize(address)'(
    _addressesProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidationCall(
    _collateral: string,
    _reserve: string,
    _user: string,
    _purchaseAmount: BigNumberish,
    _receiveAToken: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  'liquidationCall(address,address,address,uint256,bool)'(
    _collateral: string,
    _reserve: string,
    _user: string,
    _purchaseAmount: BigNumberish,
    _receiveAToken: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  rebalanceStableBorrowRate(
    _reserve: string,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'rebalanceStableBorrowRate(address,address)'(
    _reserve: string,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  repay(
    _reserve: string,
    _amount: BigNumberish,
    _rateMode: BigNumberish,
    _onBehalfOf: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  'repay(address,uint256,uint256,address)'(
    _reserve: string,
    _amount: BigNumberish,
    _rateMode: BigNumberish,
    _onBehalfOf: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  reservesList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'reservesList(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setConfiguration(
    _reserve: string,
    _configuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'setConfiguration(address,uint256)'(
    _reserve: string,
    _configuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReserveInterestRateStrategyAddress(
    _reserve: string,
    _rateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'setReserveInterestRateStrategyAddress(address,address)'(
    _reserve: string,
    _rateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUserUseReserveAsCollateral(
    _reserve: string,
    _useAsCollateral: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'setUserUseReserveAsCollateral(address,bool)'(
    _reserve: string,
    _useAsCollateral: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapBorrowRateMode(
    _reserve: string,
    _rateMode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'swapBorrowRateMode(address,uint256)'(
    _reserve: string,
    _rateMode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    _reserve: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  'withdraw(address,uint256)'(
    _reserve: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    'LENDINGPOOL_REVISION()'(overrides?: CallOverrides): Promise<BigNumber>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    'UINT_MAX_VALUE()'(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<string>;

    'addressesProvider()'(overrides?: CallOverrides): Promise<string>;

    balanceDecreaseAllowed(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'balanceDecreaseAllowed(address,address,uint256)'(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'borrow(address,uint256,uint256,uint16)'(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'deposit(address,uint256,uint16)'(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flashLoan(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    'flashLoan(address,address,uint256,bytes)'(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getConfiguration(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{data: BigNumber; 0: BigNumber}>;

    'getConfiguration(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{data: BigNumber; 0: BigNumber}>;

    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      decimals: BigNumber;
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      interestRateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      isActive: boolean;
      isFreezed: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: boolean;
      6: boolean;
      7: boolean;
      8: boolean;
      9: boolean;
    }>;

    'getReserveConfigurationData(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      decimals: BigNumber;
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      interestRateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      isActive: boolean;
      isFreezed: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: boolean;
      6: boolean;
      7: boolean;
      8: boolean;
      9: boolean;
    }>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      availableLiquidity: BigNumber;
      totalBorrowsStable: BigNumber;
      totalBorrowsVariable: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowRate: BigNumber;
      stableBorrowRate: BigNumber;
      averageStableBorrowRate: BigNumber;
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: number;
    }>;

    'getReserveData(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      availableLiquidity: BigNumber;
      totalBorrowsStable: BigNumber;
      totalBorrowsVariable: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowRate: BigNumber;
      stableBorrowRate: BigNumber;
      averageStableBorrowRate: BigNumber;
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: number;
    }>;

    getReserveNormalizedIncome(_reserve: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getReserveNormalizedIncome(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveNormalizedVariableDebt(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getReserveNormalizedVariableDebt(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveTokensAddresses(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      aTokenAddress: string;
      stableDebtTokenAddress: string;
      variableDebtTokenAddress: string;
      0: string;
      1: string;
      2: string;
    }>;

    'getReserveTokensAddresses(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      aTokenAddress: string;
      stableDebtTokenAddress: string;
      variableDebtTokenAddress: string;
      0: string;
      1: string;
      2: string;
    }>;

    getReserves(overrides?: CallOverrides): Promise<string[]>;

    'getReserves()'(overrides?: CallOverrides): Promise<string[]>;

    getUserAccountData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      totalCollateralETH: BigNumber;
      totalBorrowsETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    'getUserAccountData(address)'(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      totalCollateralETH: BigNumber;
      totalBorrowsETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      currentATokenBalance: BigNumber;
      currentStableDebt: BigNumber;
      currentVariableDebt: BigNumber;
      principalStableDebt: BigNumber;
      principalVariableDebt: BigNumber;
      stableBorrowRate: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowIndex: BigNumber;
      stableRateLastUpdated: number;
      usageAsCollateralEnabled: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: number;
      9: boolean;
    }>;

    'getUserReserveData(address,address)'(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      currentATokenBalance: BigNumber;
      currentStableDebt: BigNumber;
      currentVariableDebt: BigNumber;
      principalStableDebt: BigNumber;
      principalVariableDebt: BigNumber;
      stableBorrowRate: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowIndex: BigNumber;
      stableRateLastUpdated: number;
      usageAsCollateralEnabled: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: number;
      9: boolean;
    }>;

    initReserve(
      _reserve: string,
      _aTokenAddress: string,
      _stableDebtAddress: string,
      _variableDebtAddress: string,
      _interestRateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'initReserve(address,address,address,address,address)'(
      _reserve: string,
      _aTokenAddress: string,
      _stableDebtAddress: string,
      _variableDebtAddress: string,
      _interestRateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(_addressesProvider: string, overrides?: CallOverrides): Promise<void>;

    'initialize(address)'(_addressesProvider: string, overrides?: CallOverrides): Promise<void>;

    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'liquidationCall(address,address,address,uint256,bool)'(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    rebalanceStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'rebalanceStableBorrowRate(address,address)'(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _rateMode: BigNumberish,
      _onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'repay(address,uint256,uint256,address)'(
      _reserve: string,
      _amount: BigNumberish,
      _rateMode: BigNumberish,
      _onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reservesList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'reservesList(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setConfiguration(
      _reserve: string,
      _configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'setConfiguration(address,uint256)'(
      _reserve: string,
      _configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'setReserveInterestRateStrategyAddress(address,address)'(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    'setUserUseReserveAsCollateral(address,bool)'(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    swapBorrowRateMode(
      _reserve: string,
      _rateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'swapBorrowRateMode(address,uint256)'(
      _reserve: string,
      _rateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(_reserve: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'withdraw(address,uint256)'(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Borrow(
      _reserve: string | null,
      _user: string | null,
      _amount: null,
      _borrowRateMode: null,
      _borrowRate: null,
      _referral: BigNumberish | null,
      _timestamp: null
    ): EventFilter;

    Deposit(
      _reserve: string | null,
      _user: string | null,
      _amount: null,
      _referral: BigNumberish | null,
      _timestamp: null
    ): EventFilter;

    FlashLoan(
      _target: string | null,
      _reserve: string | null,
      _amount: null,
      _totalFee: null,
      _protocolFee: null,
      _timestamp: null
    ): EventFilter;

    LiquidationCall(
      _collateral: string | null,
      _reserve: string | null,
      _user: string | null,
      _purchaseAmount: null,
      _liquidatedCollateralAmount: null,
      _accruedBorrowInterest: null,
      _liquidator: null,
      _receiveAToken: null,
      _timestamp: null
    ): EventFilter;

    OriginationFeeLiquidated(
      _collateral: string | null,
      _reserve: string | null,
      _user: string | null,
      _feeLiquidated: null,
      _liquidatedCollateralForFee: null,
      _timestamp: null
    ): EventFilter;

    RebalanceStableBorrowRate(
      _reserve: string | null,
      _user: string | null,
      _timestamp: null
    ): EventFilter;

    Repay(
      _reserve: string | null,
      _user: string | null,
      _repayer: string | null,
      _amount: null,
      _timestamp: null
    ): EventFilter;

    ReserveUsedAsCollateralDisabled(_reserve: string | null, _user: string | null): EventFilter;

    ReserveUsedAsCollateralEnabled(_reserve: string | null, _user: string | null): EventFilter;

    Swap(_reserve: string | null, _user: string | null, _timestamp: null): EventFilter;

    Withdraw(
      _reserve: string | null,
      _user: string | null,
      _amount: null,
      _timestamp: null
    ): EventFilter;
  };

  estimateGas: {
    LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    'LENDINGPOOL_REVISION()'(overrides?: CallOverrides): Promise<BigNumber>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    'UINT_MAX_VALUE()'(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    'addressesProvider()'(overrides?: CallOverrides): Promise<BigNumber>;

    balanceDecreaseAllowed(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'balanceDecreaseAllowed(address,address,uint256)'(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'borrow(address,uint256,uint256,uint16)'(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    'deposit(address,uint256,uint16)'(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    flashLoan(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'flashLoan(address,address,uint256,bytes)'(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getConfiguration(_reserve: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getConfiguration(address)'(_reserve: string, overrides?: CallOverrides): Promise<BigNumber>;

    getReserveConfigurationData(_reserve: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getReserveConfigurationData(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveData(_reserve: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getReserveData(address)'(_reserve: string, overrides?: CallOverrides): Promise<BigNumber>;

    getReserveNormalizedIncome(_reserve: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getReserveNormalizedIncome(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveNormalizedVariableDebt(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getReserveNormalizedVariableDebt(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveTokensAddresses(_reserve: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getReserveTokensAddresses(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    'getReserves()'(overrides?: CallOverrides): Promise<BigNumber>;

    getUserAccountData(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getUserAccountData(address)'(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getUserReserveData(address,address)'(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initReserve(
      _reserve: string,
      _aTokenAddress: string,
      _stableDebtAddress: string,
      _variableDebtAddress: string,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'initReserve(address,address,address,address,address)'(
      _reserve: string,
      _aTokenAddress: string,
      _stableDebtAddress: string,
      _variableDebtAddress: string,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(_addressesProvider: string, overrides?: Overrides): Promise<BigNumber>;

    'initialize(address)'(_addressesProvider: string, overrides?: Overrides): Promise<BigNumber>;

    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    'liquidationCall(address,address,address,uint256,bool)'(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    rebalanceStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'rebalanceStableBorrowRate(address,address)'(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _rateMode: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    'repay(address,uint256,uint256,address)'(
      _reserve: string,
      _amount: BigNumberish,
      _rateMode: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    reservesList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'reservesList(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setConfiguration(
      _reserve: string,
      _configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'setConfiguration(address,uint256)'(
      _reserve: string,
      _configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'setReserveInterestRateStrategyAddress(address,address)'(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'setUserUseReserveAsCollateral(address,bool)'(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapBorrowRateMode(
      _reserve: string,
      _rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    'swapBorrowRateMode(address,uint256)'(
      _reserve: string,
      _rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(_reserve: string, _amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'withdraw(address,uint256)'(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'LENDINGPOOL_REVISION()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'UINT_MAX_VALUE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'addressesProvider()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceDecreaseAllowed(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'balanceDecreaseAllowed(address,address,uint256)'(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'borrow(address,uint256,uint256,uint16)'(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    'deposit(address,uint256,uint16)'(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    flashLoan(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'flashLoan(address,address,uint256,bytes)'(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getConfiguration(_reserve: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getConfiguration(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getReserveConfigurationData(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveData(_reserve: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getReserveData(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveNormalizedIncome(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getReserveNormalizedIncome(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveNormalizedVariableDebt(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getReserveNormalizedVariableDebt(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveTokensAddresses(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getReserveTokensAddresses(address)'(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getReserves()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserAccountData(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getUserAccountData(address)'(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getUserReserveData(address,address)'(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initReserve(
      _reserve: string,
      _aTokenAddress: string,
      _stableDebtAddress: string,
      _variableDebtAddress: string,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'initReserve(address,address,address,address,address)'(
      _reserve: string,
      _aTokenAddress: string,
      _stableDebtAddress: string,
      _variableDebtAddress: string,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(_addressesProvider: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'initialize(address)'(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    'liquidationCall(address,address,address,uint256,bool)'(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    rebalanceStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'rebalanceStableBorrowRate(address,address)'(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _rateMode: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    'repay(address,uint256,uint256,address)'(
      _reserve: string,
      _amount: BigNumberish,
      _rateMode: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    reservesList(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'reservesList(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setConfiguration(
      _reserve: string,
      _configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'setConfiguration(address,uint256)'(
      _reserve: string,
      _configuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'setReserveInterestRateStrategyAddress(address,address)'(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'setUserUseReserveAsCollateral(address,bool)'(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapBorrowRateMode(
      _reserve: string,
      _rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'swapBorrowRateMode(address,uint256)'(
      _reserve: string,
      _rateMode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    'withdraw(address,uint256)'(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
