/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MockAggregatorBusdInterface extends Interface {
  functions: {
    latestAnswer: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    AnswerUpdated: TypedEventDescription<{
      encodeTopics([current, roundId, timestamp]: [
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;
  };
}

export class MockAggregatorBusd extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MockAggregatorBusd;
  attach(addressOrName: string): MockAggregatorBusd;
  deployed(): Promise<MockAggregatorBusd>;

  on(event: EventFilter | string, listener: Listener): MockAggregatorBusd;
  once(event: EventFilter | string, listener: Listener): MockAggregatorBusd;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MockAggregatorBusd;
  removeAllListeners(eventName: EventFilter | string): MockAggregatorBusd;
  removeListener(eventName: any, listener: Listener): MockAggregatorBusd;

  interface: MockAggregatorBusdInterface;

  functions: {
    latestAnswer(): Promise<BigNumber>;
  };

  latestAnswer(): Promise<BigNumber>;

  filters: {
    AnswerUpdated(
      current: BigNumberish | null,
      roundId: BigNumberish | null,
      timestamp: null
    ): EventFilter;
  };

  estimate: {
    latestAnswer(): Promise<BigNumber>;
  };
}
