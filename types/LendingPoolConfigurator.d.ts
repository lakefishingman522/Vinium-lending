/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface LendingPoolConfiguratorInterface extends Interface {
  functions: {
    CONFIGURATOR_REVISION: TypedFunctionDescription<{ encode([]: []): string }>;

    activateReserve: TypedFunctionDescription<{
      encode([_reserve]: [string]): string;
    }>;

    deactivateReserve: TypedFunctionDescription<{
      encode([_reserve]: [string]): string;
    }>;

    disableBorrowingOnReserve: TypedFunctionDescription<{
      encode([_reserve]: [string]): string;
    }>;

    disableReserveAsCollateral: TypedFunctionDescription<{
      encode([_reserve]: [string]): string;
    }>;

    disableReserveStableBorrowRate: TypedFunctionDescription<{
      encode([_reserve]: [string]): string;
    }>;

    enableBorrowingOnReserve: TypedFunctionDescription<{
      encode([_reserve, _stableBorrowRateEnabled]: [string, boolean]): string;
    }>;

    enableReserveAsCollateral: TypedFunctionDescription<{
      encode([
        _reserve,
        _baseLTVasCollateral,
        _liquidationThreshold,
        _liquidationBonus
      ]: [string, BigNumberish, BigNumberish, BigNumberish]): string;
    }>;

    enableReserveStableBorrowRate: TypedFunctionDescription<{
      encode([_reserve]: [string]): string;
    }>;

    freezeReserve: TypedFunctionDescription<{
      encode([_reserve]: [string]): string;
    }>;

    initReserve: TypedFunctionDescription<{
      encode([
        _reserve,
        _underlyingAssetDecimals,
        _interestRateStrategyAddress
      ]: [string, BigNumberish, string]): string;
    }>;

    initReserveWithData: TypedFunctionDescription<{
      encode([
        _reserve,
        _aTokenName,
        _aTokenSymbol,
        _underlyingAssetDecimals,
        _interestRateStrategyAddress
      ]: [string, string, string, BigNumberish, string]): string;
    }>;

    initialize: TypedFunctionDescription<{
      encode([_poolAddressesProvider]: [string]): string;
    }>;

    poolAddressesProvider: TypedFunctionDescription<{ encode([]: []): string }>;

    refreshLendingPoolCoreConfiguration: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    removeLastAddedReserve: TypedFunctionDescription<{
      encode([_reserveToRemove]: [string]): string;
    }>;

    setReserveBaseLTVasCollateral: TypedFunctionDescription<{
      encode([_reserve, _ltv]: [string, BigNumberish]): string;
    }>;

    setReserveDecimals: TypedFunctionDescription<{
      encode([_reserve, _decimals]: [string, BigNumberish]): string;
    }>;

    setReserveInterestRateStrategyAddress: TypedFunctionDescription<{
      encode([_reserve, _rateStrategyAddress]: [string, string]): string;
    }>;

    setReserveLiquidationBonus: TypedFunctionDescription<{
      encode([_reserve, _bonus]: [string, BigNumberish]): string;
    }>;

    setReserveLiquidationThreshold: TypedFunctionDescription<{
      encode([_reserve, _threshold]: [string, BigNumberish]): string;
    }>;

    unfreezeReserve: TypedFunctionDescription<{
      encode([_reserve]: [string]): string;
    }>;
  };

  events: {
    BorrowingDisabledOnReserve: TypedEventDescription<{
      encodeTopics([_reserve]: [string | null]): string[];
    }>;

    BorrowingEnabledOnReserve: TypedEventDescription<{
      encodeTopics([_reserve, _stableRateEnabled]: [null, null]): string[];
    }>;

    ReserveActivated: TypedEventDescription<{
      encodeTopics([_reserve]: [string | null]): string[];
    }>;

    ReserveBaseLtvChanged: TypedEventDescription<{
      encodeTopics([_reserve, _ltv]: [null, null]): string[];
    }>;

    ReserveDeactivated: TypedEventDescription<{
      encodeTopics([_reserve]: [string | null]): string[];
    }>;

    ReserveDecimalsChanged: TypedEventDescription<{
      encodeTopics([_reserve, _decimals]: [null, null]): string[];
    }>;

    ReserveDisabledAsCollateral: TypedEventDescription<{
      encodeTopics([_reserve]: [string | null]): string[];
    }>;

    ReserveEnabledAsCollateral: TypedEventDescription<{
      encodeTopics([_reserve, _ltv, _liquidationThreshold, _liquidationBonus]: [
        string | null,
        null,
        null,
        null
      ]): string[];
    }>;

    ReserveFreezed: TypedEventDescription<{
      encodeTopics([_reserve]: [string | null]): string[];
    }>;

    ReserveInitialized: TypedEventDescription<{
      encodeTopics([_reserve, _aToken, _interestRateStrategyAddress]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    ReserveInterestRateStrategyChanged: TypedEventDescription<{
      encodeTopics([_reserve, _strategy]: [null, null]): string[];
    }>;

    ReserveLiquidationBonusChanged: TypedEventDescription<{
      encodeTopics([_reserve, _bonus]: [null, null]): string[];
    }>;

    ReserveLiquidationThresholdChanged: TypedEventDescription<{
      encodeTopics([_reserve, _threshold]: [null, null]): string[];
    }>;

    ReserveRemoved: TypedEventDescription<{
      encodeTopics([_reserve]: [string | null]): string[];
    }>;

    ReserveUnfreezed: TypedEventDescription<{
      encodeTopics([_reserve]: [string | null]): string[];
    }>;

    StableRateDisabledOnReserve: TypedEventDescription<{
      encodeTopics([_reserve]: [string | null]): string[];
    }>;

    StableRateEnabledOnReserve: TypedEventDescription<{
      encodeTopics([_reserve]: [string | null]): string[];
    }>;
  };
}

export class LendingPoolConfigurator extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): LendingPoolConfigurator;
  attach(addressOrName: string): LendingPoolConfigurator;
  deployed(): Promise<LendingPoolConfigurator>;

  on(event: EventFilter | string, listener: Listener): LendingPoolConfigurator;
  once(
    event: EventFilter | string,
    listener: Listener
  ): LendingPoolConfigurator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): LendingPoolConfigurator;
  removeAllListeners(eventName: EventFilter | string): LendingPoolConfigurator;
  removeListener(eventName: any, listener: Listener): LendingPoolConfigurator;

  interface: LendingPoolConfiguratorInterface;

  functions: {
    CONFIGURATOR_REVISION(): Promise<BigNumber>;

    activateReserve(
      _reserve: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deactivateReserve(
      _reserve: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    disableBorrowingOnReserve(
      _reserve: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    disableReserveAsCollateral(
      _reserve: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    disableReserveStableBorrowRate(
      _reserve: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    enableBorrowingOnReserve(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    enableReserveAsCollateral(
      _reserve: string,
      _baseLTVasCollateral: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _liquidationBonus: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    enableReserveStableBorrowRate(
      _reserve: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    freezeReserve(
      _reserve: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    initReserve(
      _reserve: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    initReserveWithData(
      _reserve: string,
      _aTokenName: string,
      _aTokenSymbol: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    initialize(
      _poolAddressesProvider: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    poolAddressesProvider(): Promise<string>;

    refreshLendingPoolCoreConfiguration(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeLastAddedReserve(
      _reserveToRemove: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setReserveBaseLTVasCollateral(
      _reserve: string,
      _ltv: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setReserveDecimals(
      _reserve: string,
      _decimals: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setReserveLiquidationBonus(
      _reserve: string,
      _bonus: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setReserveLiquidationThreshold(
      _reserve: string,
      _threshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    unfreezeReserve(
      _reserve: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  CONFIGURATOR_REVISION(): Promise<BigNumber>;

  activateReserve(
    _reserve: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deactivateReserve(
    _reserve: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  disableBorrowingOnReserve(
    _reserve: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  disableReserveAsCollateral(
    _reserve: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  disableReserveStableBorrowRate(
    _reserve: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  enableBorrowingOnReserve(
    _reserve: string,
    _stableBorrowRateEnabled: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  enableReserveAsCollateral(
    _reserve: string,
    _baseLTVasCollateral: BigNumberish,
    _liquidationThreshold: BigNumberish,
    _liquidationBonus: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  enableReserveStableBorrowRate(
    _reserve: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  freezeReserve(
    _reserve: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  initReserve(
    _reserve: string,
    _underlyingAssetDecimals: BigNumberish,
    _interestRateStrategyAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  initReserveWithData(
    _reserve: string,
    _aTokenName: string,
    _aTokenSymbol: string,
    _underlyingAssetDecimals: BigNumberish,
    _interestRateStrategyAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  initialize(
    _poolAddressesProvider: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  poolAddressesProvider(): Promise<string>;

  refreshLendingPoolCoreConfiguration(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeLastAddedReserve(
    _reserveToRemove: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setReserveBaseLTVasCollateral(
    _reserve: string,
    _ltv: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setReserveDecimals(
    _reserve: string,
    _decimals: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setReserveInterestRateStrategyAddress(
    _reserve: string,
    _rateStrategyAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setReserveLiquidationBonus(
    _reserve: string,
    _bonus: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setReserveLiquidationThreshold(
    _reserve: string,
    _threshold: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  unfreezeReserve(
    _reserve: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    BorrowingDisabledOnReserve(_reserve: string | null): EventFilter;

    BorrowingEnabledOnReserve(
      _reserve: null,
      _stableRateEnabled: null
    ): EventFilter;

    ReserveActivated(_reserve: string | null): EventFilter;

    ReserveBaseLtvChanged(_reserve: null, _ltv: null): EventFilter;

    ReserveDeactivated(_reserve: string | null): EventFilter;

    ReserveDecimalsChanged(_reserve: null, _decimals: null): EventFilter;

    ReserveDisabledAsCollateral(_reserve: string | null): EventFilter;

    ReserveEnabledAsCollateral(
      _reserve: string | null,
      _ltv: null,
      _liquidationThreshold: null,
      _liquidationBonus: null
    ): EventFilter;

    ReserveFreezed(_reserve: string | null): EventFilter;

    ReserveInitialized(
      _reserve: string | null,
      _aToken: string | null,
      _interestRateStrategyAddress: null
    ): EventFilter;

    ReserveInterestRateStrategyChanged(
      _reserve: null,
      _strategy: null
    ): EventFilter;

    ReserveLiquidationBonusChanged(_reserve: null, _bonus: null): EventFilter;

    ReserveLiquidationThresholdChanged(
      _reserve: null,
      _threshold: null
    ): EventFilter;

    ReserveRemoved(_reserve: string | null): EventFilter;

    ReserveUnfreezed(_reserve: string | null): EventFilter;

    StableRateDisabledOnReserve(_reserve: string | null): EventFilter;

    StableRateEnabledOnReserve(_reserve: string | null): EventFilter;
  };

  estimate: {
    CONFIGURATOR_REVISION(): Promise<BigNumber>;

    activateReserve(_reserve: string): Promise<BigNumber>;

    deactivateReserve(_reserve: string): Promise<BigNumber>;

    disableBorrowingOnReserve(_reserve: string): Promise<BigNumber>;

    disableReserveAsCollateral(_reserve: string): Promise<BigNumber>;

    disableReserveStableBorrowRate(_reserve: string): Promise<BigNumber>;

    enableBorrowingOnReserve(
      _reserve: string,
      _stableBorrowRateEnabled: boolean
    ): Promise<BigNumber>;

    enableReserveAsCollateral(
      _reserve: string,
      _baseLTVasCollateral: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _liquidationBonus: BigNumberish
    ): Promise<BigNumber>;

    enableReserveStableBorrowRate(_reserve: string): Promise<BigNumber>;

    freezeReserve(_reserve: string): Promise<BigNumber>;

    initReserve(
      _reserve: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string
    ): Promise<BigNumber>;

    initReserveWithData(
      _reserve: string,
      _aTokenName: string,
      _aTokenSymbol: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string
    ): Promise<BigNumber>;

    initialize(_poolAddressesProvider: string): Promise<BigNumber>;

    poolAddressesProvider(): Promise<BigNumber>;

    refreshLendingPoolCoreConfiguration(): Promise<BigNumber>;

    removeLastAddedReserve(_reserveToRemove: string): Promise<BigNumber>;

    setReserveBaseLTVasCollateral(
      _reserve: string,
      _ltv: BigNumberish
    ): Promise<BigNumber>;

    setReserveDecimals(
      _reserve: string,
      _decimals: BigNumberish
    ): Promise<BigNumber>;

    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string
    ): Promise<BigNumber>;

    setReserveLiquidationBonus(
      _reserve: string,
      _bonus: BigNumberish
    ): Promise<BigNumber>;

    setReserveLiquidationThreshold(
      _reserve: string,
      _threshold: BigNumberish
    ): Promise<BigNumber>;

    unfreezeReserve(_reserve: string): Promise<BigNumber>;
  };
}
